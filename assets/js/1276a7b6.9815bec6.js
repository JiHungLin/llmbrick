"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[317],{4777:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"documents/bricks/common_brick_guide","title":"CommonBrick","description":"\u672c\u6307\u5357\u8a73\u7d30\u8aaa\u660e llmbrick/bricks/common/common.py \u4e2d\u7684 CommonBrick \u5be6\u4f5c\uff0c\u9019\u662f LLMBrick \u6846\u67b6\u4e2d\u6700\u57fa\u790e\u4e14\u91cd\u8981\u7684\u7d44\u4ef6\u3002","source":"@site/docs/documents/bricks/common_brick_guide.md","sourceDirName":"documents/bricks","slug":"/documents/bricks/common_brick_guide","permalink":"/llmbrick/docs/documents/bricks/common_brick_guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentsSidebar","previous":{"title":"Bricks","permalink":"/llmbrick/docs/category/bricks"},"next":{"title":"ComposeBrick","permalink":"/llmbrick/docs/documents/bricks/compose_brick_guide"}}');var t=s(4848),o=s(8453);const i={},c="CommonBrick",a={},l=[{value:"\u5c08\u6848\u6982\u8ff0\u8207\u76ee\u6a19",id:"\u5c08\u6848\u6982\u8ff0\u8207\u76ee\u6a19",level:2},{value:"\ud83c\udfaf \u8a2d\u8a08\u76ee\u6a19\u8207\u89e3\u6c7a\u554f\u984c",id:"-\u8a2d\u8a08\u76ee\u6a19\u8207\u89e3\u6c7a\u554f\u984c",level:3},{value:"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd\u7279\u8272",id:"-\u6838\u5fc3\u529f\u80fd\u7279\u8272",level:3},{value:"\u5c08\u6848\u7d50\u69cb\u5716\u8207\u6a21\u7d44\u8a73\u89e3",id:"\u5c08\u6848\u7d50\u69cb\u5716\u8207\u6a21\u7d44\u8a73\u89e3",level:2},{value:"\u6574\u9ad4\u67b6\u69cb\u5716",id:"\u6574\u9ad4\u67b6\u69cb\u5716",level:3},{value:"\u6838\u5fc3\u6a21\u7d44\u8a73\u7d30\u8aaa\u660e",id:"\u6838\u5fc3\u6a21\u7d44\u8a73\u7d30\u8aaa\u660e",level:3},{value:"1. <code>BaseBrick</code> - \u57fa\u790e\u62bd\u8c61\u985e\u5225",id:"1-basebrick---\u57fa\u790e\u62bd\u8c61\u985e\u5225",level:4},{value:"2. <code>CommonBrick</code> - \u901a\u7528 Brick \u5be6\u4f5c",id:"2-commonbrick---\u901a\u7528-brick-\u5be6\u4f5c",level:4},{value:"3. <code>ErrorCodes</code> - \u932f\u8aa4\u78bc\u7ba1\u7406",id:"3-errorcodes---\u932f\u8aa4\u78bc\u7ba1\u7406",level:4},{value:"4. \u8cc7\u6599\u6a21\u578b\u7cfb\u7d71",id:"4-\u8cc7\u6599\u6a21\u578b\u7cfb\u7d71",level:4},{value:"5. gRPC \u5354\u5b9a\u5c64",id:"5-grpc-\u5354\u5b9a\u5c64",level:4},{value:"\u5b89\u88dd\u8207\u74b0\u5883\u8a2d\u5b9a\u6307\u5357",id:"\u5b89\u88dd\u8207\u74b0\u5883\u8a2d\u5b9a\u6307\u5357",level:2},{value:"\u4f9d\u8cf4\u9700\u6c42",id:"\u4f9d\u8cf4\u9700\u6c42",level:3},{value:"\u81ea\u52d5\u5316\u5b89\u88dd\u6b65\u9a5f",id:"\u81ea\u52d5\u5316\u5b89\u88dd\u6b65\u9a5f",level:3},{value:"1. \u5b89\u88dd LLMBrick \u5957\u4ef6",id:"1-\u5b89\u88dd-llmbrick-\u5957\u4ef6",level:4},{value:"2. \u9a57\u8b49\u5b89\u88dd",id:"2-\u9a57\u8b49\u5b89\u88dd",level:4},{value:"3. \u958b\u767c\u74b0\u5883\u8a2d\u5b9a",id:"3-\u958b\u767c\u74b0\u5883\u8a2d\u5b9a",level:4},{value:"\u9010\u6b65\u7bc4\u4f8b\uff1a\u5f9e\u57fa\u790e\u5230\u9032\u968e",id:"\u9010\u6b65\u7bc4\u4f8b\u5f9e\u57fa\u790e\u5230\u9032\u968e",level:2},{value:"1. \u6700\u7c21\u55ae\u7684 CommonBrick \u4f7f\u7528",id:"1-\u6700\u7c21\u55ae\u7684-commonbrick-\u4f7f\u7528",level:3},{value:"2. \u985e\u5225\u7e7c\u627f\u65b9\u5f0f\u5b9a\u7fa9 CommonBrick",id:"2-\u985e\u5225\u7e7c\u627f\u65b9\u5f0f\u5b9a\u7fa9-commonbrick",level:3},{value:"3. gRPC \u670d\u52d9\u7aef\u5efa\u7acb\u8207\u90e8\u7f72",id:"3-grpc-\u670d\u52d9\u7aef\u5efa\u7acb\u8207\u90e8\u7f72",level:3},{value:"4. gRPC \u5ba2\u6236\u7aef\u9023\u63a5\u8207\u4f7f\u7528",id:"4-grpc-\u5ba2\u6236\u7aef\u9023\u63a5\u8207\u4f7f\u7528",level:3},{value:"\u6838\u5fc3 API / \u985e\u5225 / \u51fd\u5f0f\u6df1\u5ea6\u89e3\u6790",id:"\u6838\u5fc3-api--\u985e\u5225--\u51fd\u5f0f\u6df1\u5ea6\u89e3\u6790",level:2},{value:"<code>CommonBrick</code> \u985e\u5225",id:"commonbrick-\u985e\u5225",level:3},{value:"\u985e\u5225\u7c3d\u540d\u8207\u7e7c\u627f\u95dc\u4fc2",id:"\u985e\u5225\u7c3d\u540d\u8207\u7e7c\u627f\u95dc\u4fc2",level:4},{value:"\u6838\u5fc3\u65b9\u6cd5\u8a73\u89e3",id:"\u6838\u5fc3\u65b9\u6cd5\u8a73\u89e3",level:4},{value:"<code>toGrpcClient()</code> - gRPC \u5ba2\u6236\u7aef\u8f49\u63db",id:"togrpcclient---grpc-\u5ba2\u6236\u7aef\u8f49\u63db",level:5},{value:"\u6a19\u6e96\u57f7\u884c\u65b9\u6cd5",id:"\u6a19\u6e96\u57f7\u884c\u65b9\u6cd5",level:4},{value:"<code>run_unary()</code> - \u55ae\u6b21\u8acb\u6c42\u57f7\u884c",id:"run_unary---\u55ae\u6b21\u8acb\u6c42\u57f7\u884c",level:5},{value:"<code>run_output_streaming()</code> - \u8f38\u51fa\u4e32\u6d41\u57f7\u884c",id:"run_output_streaming---\u8f38\u51fa\u4e32\u6d41\u57f7\u884c",level:5},{value:"<code>run_input_streaming()</code> - \u8f38\u5165\u4e32\u6d41\u57f7\u884c",id:"run_input_streaming---\u8f38\u5165\u4e32\u6d41\u57f7\u884c",level:5},{value:"<code>run_bidi_streaming()</code> - \u96d9\u5411\u4e32\u6d41\u57f7\u884c",id:"run_bidi_streaming---\u96d9\u5411\u4e32\u6d41\u57f7\u884c",level:5},{value:"<code>run_get_service_info()</code> - \u670d\u52d9\u8cc7\u8a0a\u67e5\u8a62",id:"run_get_service_info---\u670d\u52d9\u8cc7\u8a0a\u67e5\u8a62",level:5},{value:"\u88dd\u98fe\u5668\u7cfb\u7d71\u8a73\u89e3",id:"\u88dd\u98fe\u5668\u7cfb\u7d71\u8a73\u89e3",level:3},{value:"\u5be6\u4f8b\u88dd\u98fe\u5668\uff08\u63a8\u85a6\u7528\u65bc\u52d5\u614b\u5834\u666f\uff09",id:"\u5be6\u4f8b\u88dd\u98fe\u5668\u63a8\u85a6\u7528\u65bc\u52d5\u614b\u5834\u666f",level:4},{value:"\u985e\u5225\u88dd\u98fe\u5668\uff08\u63a8\u85a6\u7528\u65bc\u7e7c\u627f\u5834\u666f\uff09",id:"\u985e\u5225\u88dd\u98fe\u5668\u63a8\u85a6\u7528\u65bc\u7e7c\u627f\u5834\u666f",level:4},{value:"\u6548\u80fd\u512a\u5316\u8207\u6700\u4f73\u5be6\u8e10",id:"\u6548\u80fd\u512a\u5316\u8207\u6700\u4f73\u5be6\u8e10",level:2},{value:"1. \u7570\u6b65\u8655\u7406\u512a\u5316",id:"1-\u7570\u6b65\u8655\u7406\u512a\u5316",level:3},{value:"\u4e26\u767c\u63a7\u5236",id:"\u4e26\u767c\u63a7\u5236",level:4},{value:"2. \u5feb\u53d6\u7b56\u7565\u512a\u5316",id:"2-\u5feb\u53d6\u7b56\u7565\u512a\u5316",level:3},{value:"3. \u6279\u6b21\u8655\u7406\u512a\u5316",id:"3-\u6279\u6b21\u8655\u7406\u512a\u5316",level:3},{value:"FAQ / \u9032\u968e\u554f\u7b54",id:"faq--\u9032\u968e\u554f\u7b54",level:2},{value:"Q1: CommonBrick \u8207\u5176\u4ed6 Brick \u985e\u578b\u7684\u95dc\u4fc2\u662f\u4ec0\u9ebc\uff1f",id:"q1-commonbrick-\u8207\u5176\u4ed6-brick-\u985e\u578b\u7684\u95dc\u4fc2\u662f\u4ec0\u9ebc",level:3},{value:"\u53c3\u8003\u8cc7\u6e90\u8207\u5ef6\u4f38\u95b1\u8b80",id:"\u53c3\u8003\u8cc7\u6e90\u8207\u5ef6\u4f38\u95b1\u8b80",level:2},{value:"\u5b98\u65b9\u6587\u4ef6",id:"\u5b98\u65b9\u6587\u4ef6",level:3},{value:"\u5916\u90e8\u8cc7\u6e90",id:"\u5916\u90e8\u8cc7\u6e90",level:3},{value:"\u793e\u7fa4\u8cc7\u6e90",id:"\u793e\u7fa4\u8cc7\u6e90",level:3}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"commonbrick",children:"CommonBrick"})}),"\n",(0,t.jsxs)(e.p,{children:["\u672c\u6307\u5357\u8a73\u7d30\u8aaa\u660e ",(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/bricks/common/common.py",children:(0,t.jsx)(e.code,{children:"llmbrick/bricks/common/common.py"})})," \u4e2d\u7684 CommonBrick \u5be6\u4f5c\uff0c\u9019\u662f LLMBrick \u6846\u67b6\u4e2d\u6700\u57fa\u790e\u4e14\u91cd\u8981\u7684\u7d44\u4ef6\u3002"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"\u5c08\u6848\u6982\u8ff0\u8207\u76ee\u6a19",children:"\u5c08\u6848\u6982\u8ff0\u8207\u76ee\u6a19"}),"\n",(0,t.jsx)(e.h3,{id:"-\u8a2d\u8a08\u76ee\u6a19\u8207\u89e3\u6c7a\u554f\u984c",children:"\ud83c\udfaf \u8a2d\u8a08\u76ee\u6a19\u8207\u89e3\u6c7a\u554f\u984c"}),"\n",(0,t.jsx)(e.p,{children:"CommonBrick \u662f LLMBrick \u6846\u67b6\u7684\u6838\u5fc3\u57fa\u790e\u7d44\u4ef6\uff0c\u8a2d\u8a08\u7528\u4f86\u89e3\u6c7a\u4ee5\u4e0b\u95dc\u9375\u554f\u984c\uff1a"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u7d71\u4e00\u4ecb\u9762\u5354\u5b9a"}),"\uff1a\u70ba\u6240\u6709 Brick \u985e\u578b\u63d0\u4f9b\u6a19\u6e96\u5316\u7684\u8acb\u6c42/\u56de\u61c9\u8655\u7406\u6a5f\u5236"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u591a\u5354\u5b9a\u652f\u63f4"}),"\uff1a\u5167\u5efa\u5b8c\u6574\u7684 gRPC \u670d\u52d9\u652f\u63f4\uff0c\u652f\u63f4\u56db\u7a2e\u901a\u8a0a\u6a21\u5f0f"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u64f4\u5c55\u57fa\u790e"}),"\uff1a\u4f5c\u70ba\u5176\u4ed6\u5c08\u7528 Brick\uff08LLMBrick\u3001GuardBrick \u7b49\uff09\u7684\u7e7c\u627f\u57fa\u790e"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u670d\u52d9\u5316\u80fd\u529b"}),"\uff1a\u53ef\u8f15\u9b06\u8f49\u63db\u70ba\u7368\u7acb\u7684\u5fae\u670d\u52d9\u6216\u5ba2\u6236\u7aef"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u932f\u8aa4\u8655\u7406\u6a19\u6e96\u5316"}),"\uff1a\u63d0\u4f9b\u7d71\u4e00\u7684\u932f\u8aa4\u8655\u7406\u548c\u72c0\u614b\u7ba1\u7406\u6a5f\u5236"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"-\u6838\u5fc3\u529f\u80fd\u7279\u8272",children:"\ud83d\udd27 \u6838\u5fc3\u529f\u80fd\u7279\u8272"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u56db\u7a2e\u901a\u8a0a\u6a21\u5f0f"}),"\uff1aUnary\uff08\u55ae\u6b21\uff09\u3001Input Streaming\uff08\u8f38\u5165\u4e32\u6d41\uff09\u3001Output Streaming\uff08\u8f38\u51fa\u4e32\u6d41\uff09\u3001Bidirectional Streaming\uff08\u96d9\u5411\u4e32\u6d41\uff09"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u88dd\u98fe\u5668\u6a21\u5f0f"}),"\uff1a\u652f\u63f4\u52d5\u614b\u8a3b\u518a\u8655\u7406\u5668\uff0c\u9748\u6d3b\u7d44\u5408\u696d\u52d9\u908f\u8f2f"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u985e\u5225\u7e7c\u627f\u6a21\u5f0f"}),"\uff1a\u652f\u63f4\u50b3\u7d71\u7684\u985e\u5225\u7e7c\u627f\u65b9\u5f0f\u5b9a\u7fa9\u8655\u7406\u5668"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u81ea\u52d5 gRPC \u8f49\u63db"}),"\uff1a\u4e00\u9375\u8f49\u63db\u70ba gRPC \u5ba2\u6236\u7aef\u6216\u670d\u52d9\u7aef"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u5b8c\u6574\u932f\u8aa4\u8655\u7406"}),"\uff1a\u5167\u5efa\u8c50\u5bcc\u7684\u932f\u8aa4\u78bc\u548c\u932f\u8aa4\u8655\u7406\u6a5f\u5236"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"\u5c08\u6848\u7d50\u69cb\u5716\u8207\u6a21\u7d44\u8a73\u89e3",children:"\u5c08\u6848\u7d50\u69cb\u5716\u8207\u6a21\u7d44\u8a73\u89e3"}),"\n",(0,t.jsx)(e.h3,{id:"\u6574\u9ad4\u67b6\u69cb\u5716",children:"\u6574\u9ad4\u67b6\u69cb\u5716"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-plaintext",children:"LLMBrick Framework\n\u251c\u2500\u2500 llmbrick/\n\u2502   \u251c\u2500\u2500 core/                           # \u6838\u5fc3\u57fa\u790e\u6a21\u7d44\n\u2502   \u2502   \u251c\u2500\u2500 brick.py                    # BaseBrick \u57fa\u790e\u985e\u5225\u8207\u88dd\u98fe\u5668\n\u2502   \u2502   \u251c\u2500\u2500 error_codes.py              # \u7d71\u4e00\u932f\u8aa4\u78bc\u5b9a\u7fa9\n\u2502   \u2502   \u2514\u2500\u2500 exceptions.py               # \u81ea\u8a02\u4f8b\u5916\u985e\u5225\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 bricks/                         # Brick \u5be6\u4f5c\u6a21\u7d44\n\u2502   \u2502   \u2514\u2500\u2500 common/\n\u2502   \u2502       \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2514\u2500\u2500 common.py               # CommonBrick \u4e3b\u9ad4\u5be6\u4f5c\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 protocols/                      # \u5354\u5b9a\u5b9a\u7fa9\u6a21\u7d44\n\u2502   \u2502   \u251c\u2500\u2500 grpc/                       # gRPC \u5354\u5b9a\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 common/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 common.proto        # Protocol Buffer \u5b9a\u7fa9\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 common_pb2.py       # \u81ea\u52d5\u751f\u6210\u7684\u8a0a\u606f\u985e\u5225\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 common_pb2_grpc.py  # \u81ea\u52d5\u751f\u6210\u7684\u670d\u52d9\u5b58\u6839\n\u2502   \u2502   \u2514\u2500\u2500 models/                     # \u8cc7\u6599\u6a21\u578b\n\u2502   \u2502       \u2514\u2500\u2500 bricks/\n\u2502   \u2502           \u2514\u2500\u2500 common_types.py     # CommonBrick \u8cc7\u6599\u985e\u578b\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 servers/                        # \u670d\u52d9\u5668\u5be6\u4f5c\n\u2502       \u2514\u2500\u2500 grpc/\n\u2502           \u251c\u2500\u2500 server.py               # gRPC \u670d\u52d9\u5668\n\u2502           \u2514\u2500\u2500 wrappers/\n\u2502               \u2514\u2500\u2500 common_grpc_wrapper.py  # CommonBrick gRPC \u5305\u88dd\u5668\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u6838\u5fc3\u6a21\u7d44\u8a73\u7d30\u8aaa\u660e",children:"\u6838\u5fc3\u6a21\u7d44\u8a73\u7d30\u8aaa\u660e"}),"\n",(0,t.jsxs)(e.h4,{id:"1-basebrick---\u57fa\u790e\u62bd\u8c61\u985e\u5225",children:["1. ",(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/brick.py#L71",children:(0,t.jsx)(e.code,{children:"BaseBrick"})})," - \u57fa\u790e\u62bd\u8c61\u985e\u5225"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u8077\u8cac"}),"\uff1a\u6240\u6709 Brick \u7684\u57fa\u790e\u985e\u5225\uff0c\u5b9a\u7fa9\u6a19\u6e96\u4ecb\u9762\u548c\u884c\u70ba"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u6838\u5fc3\u7279\u6027"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u6cdb\u578b\u652f\u63f4"}),"\uff1a",(0,t.jsx)(e.code,{children:"BaseBrick[InputT, OutputT]"})," \u63d0\u4f9b\u578b\u5225\u5b89\u5168"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u8655\u7406\u5668\u7ba1\u7406"}),"\uff1a\u81ea\u52d5\u8a3b\u518a\u548c\u7ba1\u7406\u4e94\u7a2e\u8655\u7406\u5668\u985e\u578b"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u88dd\u98fe\u5668\u652f\u63f4"}),"\uff1a\u63d0\u4f9b ",(0,t.jsx)(e.code,{children:"@brick.unary()"})," \u7b49\u88dd\u98fe\u5668\u65b9\u6cd5"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u57f7\u884c\u5165\u53e3"}),"\uff1a\u63d0\u4f9b ",(0,t.jsx)(e.code,{children:"run_*"})," \u7cfb\u5217\u65b9\u6cd5\u4f5c\u70ba\u7d71\u4e00\u57f7\u884c\u5165\u53e3"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u932f\u8aa4\u8655\u7406"}),"\uff1a\u5167\u5efa\u7570\u5e38\u6355\u7372\u548c\u65e5\u8a8c\u8a18\u9304"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u95dc\u9375\u5c6c\u6027"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"class BaseBrick(Generic[InputT, OutputT]):\n    brick_type: Optional[BrickType] = None              # Brick \u985e\u578b\u6a19\u8b58\n    allowed_handler_types: Optional[set] = None         # \u5141\u8a31\u7684\u8655\u7406\u5668\u985e\u578b\u9650\u5236\n    _unary_handler: Optional[UnaryHandler] = None       # \u55ae\u6b21\u8acb\u6c42\u8655\u7406\u5668\n    _output_streaming_handler: Optional[...] = None     # \u8f38\u51fa\u4e32\u6d41\u8655\u7406\u5668\n    _input_streaming_handler: Optional[...] = None      # \u8f38\u5165\u4e32\u6d41\u8655\u7406\u5668\n    _bidi_streaming_handler: Optional[...] = None       # \u96d9\u5411\u4e32\u6d41\u8655\u7406\u5668\n    _get_service_info_handler: Optional[...] = None     # \u670d\u52d9\u8cc7\u8a0a\u8655\u7406\u5668\n"})}),"\n",(0,t.jsxs)(e.h4,{id:"2-commonbrick---\u901a\u7528-brick-\u5be6\u4f5c",children:["2. ",(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/bricks/common/common.py#L15",children:(0,t.jsx)(e.code,{children:"CommonBrick"})})," - \u901a\u7528 Brick \u5be6\u4f5c"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u8077\u8cac"}),"\uff1a\u63d0\u4f9b\u901a\u7528\u7684\u8acb\u6c42/\u56de\u61c9\u8655\u7406\u80fd\u529b\uff0c\u652f\u63f4\u6240\u6709\u901a\u8a0a\u6a21\u5f0f"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u6838\u5fc3\u7279\u6027"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u7e7c\u627f BaseBrick"}),"\uff1a\u7372\u5f97\u5b8c\u6574\u7684\u57fa\u790e\u529f\u80fd"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"gRPC \u6574\u5408"}),"\uff1a\u5167\u5efa ",(0,t.jsx)(e.code,{children:"toGrpcClient()"})," \u65b9\u6cd5"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u7121\u9650\u5236\u8655\u7406\u5668"}),"\uff1a\u652f\u63f4\u6240\u6709\u4e94\u7a2e\u8655\u7406\u5668\u985e\u578b"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u6a19\u6e96\u8cc7\u6599\u6a21\u578b"}),"\uff1a\u4f7f\u7528 ",(0,t.jsx)(e.code,{children:"CommonRequest/CommonResponse"})]}),"\n"]}),"\n",(0,t.jsxs)(e.h4,{id:"3-errorcodes---\u932f\u8aa4\u78bc\u7ba1\u7406",children:["3. ",(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/error_codes.py#L12",children:(0,t.jsx)(e.code,{children:"ErrorCodes"})})," - \u932f\u8aa4\u78bc\u7ba1\u7406"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u8077\u8cac"}),"\uff1a\u7d71\u4e00\u7684\u932f\u8aa4\u78bc\u5b9a\u7fa9\u548c ErrorDetail \u5275\u5efa\u5de5\u5ee0"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u932f\u8aa4\u78bc\u5206\u985e"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"HTTP \u6a19\u6e96\u78bc"}),"\uff1a200-599\uff08\u6210\u529f\u3001\u5ba2\u6236\u7aef\u932f\u8aa4\u3001\u670d\u52d9\u5668\u932f\u8aa4\uff09"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u6846\u67b6\u696d\u52d9\u78bc"}),"\uff1a1000-9999\uff08\u901a\u7528\u3001\u9a57\u8b49\u3001\u8a8d\u8b49\u3001\u6a21\u578b\u3001\u5916\u90e8\u670d\u52d9\u3001\u8cc7\u6e90\u3001\u7db2\u8def\u3001\u5b58\u5132\u3001\u696d\u52d9\u932f\u8aa4\uff09"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u5de5\u5ee0\u65b9\u6cd5\u7bc4\u4f8b"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \u5feb\u901f\u5275\u5efa\u5e38\u7528\u932f\u8aa4\nErrorCodes.success()                    # \u6210\u529f\u72c0\u614b\nErrorCodes.parameter_invalid("name")    # \u53c3\u6578\u7121\u6548\nErrorCodes.model_not_found("gpt-4")     # \u6a21\u578b\u672a\u627e\u5230\nErrorCodes.internal_error("\u8a73\u7d30\u932f\u8aa4")    # \u5167\u90e8\u932f\u8aa4\n'})}),"\n",(0,t.jsx)(e.h4,{id:"4-\u8cc7\u6599\u6a21\u578b\u7cfb\u7d71",children:"4. \u8cc7\u6599\u6a21\u578b\u7cfb\u7d71"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/protocols/models/bricks/common_types.py#L58",children:(0,t.jsx)(e.code,{children:"CommonRequest"})})}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"@dataclass\nclass CommonRequest:\n    data: Dict[str, Any] = field(default_factory=dict)  # \u9748\u6d3b\u7684\u8cc7\u6599\u8f09\u9ad4\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/protocols/models/bricks/common_types.py#L71",children:(0,t.jsx)(e.code,{children:"CommonResponse"})})}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"@dataclass\nclass CommonResponse:\n    data: Dict[str, Any] = field(default_factory=dict)  # \u56de\u61c9\u8cc7\u6599\n    error: Optional[ErrorDetail] = None                  # \u932f\u8aa4\u8a73\u60c5\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/protocols/models/bricks/common_types.py#L106",children:(0,t.jsx)(e.code,{children:"ServiceInfoResponse"})})}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'@dataclass\nclass ServiceInfoResponse:\n    service_name: str = ""                               # \u670d\u52d9\u540d\u7a31\n    version: str = ""                                    # \u7248\u672c\u8cc7\u8a0a\n    models: List[ModelInfo] = field(default_factory=list)  # \u652f\u63f4\u7684\u6a21\u578b\n    error: Optional[ErrorDetail] = None                  # \u932f\u8aa4\u72c0\u614b\n'})}),"\n",(0,t.jsx)(e.h4,{id:"5-grpc-\u5354\u5b9a\u5c64",children:"5. gRPC \u5354\u5b9a\u5c64"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/protocols/grpc/common/common.proto",children:"Protocol Buffer \u5b9a\u7fa9"})}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-protobuf",children:"service CommonService {\n  rpc GetServiceInfo(ServiceInfoRequest) returns (ServiceInfoResponse);\n  rpc Unary (CommonRequest) returns (CommonResponse);\n  rpc OutputStreaming (CommonRequest) returns (stream CommonResponse);\n  rpc InputStreaming (stream CommonRequest) returns (CommonResponse);\n  rpc BidiStreaming (stream CommonRequest) returns (stream CommonResponse);\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/servers/grpc/wrappers/common_grpc_wrapper.py",children:"gRPC \u5305\u88dd\u5668"})}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u81ea\u52d5\u8655\u7406 Protocol Buffer \u8207 Python \u7269\u4ef6\u8f49\u63db"}),"\n",(0,t.jsx)(e.li,{children:"\u7d71\u4e00\u7684\u932f\u8aa4\u8655\u7406\u548c\u72c0\u614b\u78bc\u6620\u5c04"}),"\n",(0,t.jsx)(e.li,{children:"\u7570\u6b65\u4e32\u6d41\u8655\u7406\u652f\u63f4"}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"\u5b89\u88dd\u8207\u74b0\u5883\u8a2d\u5b9a\u6307\u5357",children:"\u5b89\u88dd\u8207\u74b0\u5883\u8a2d\u5b9a\u6307\u5357"}),"\n",(0,t.jsx)(e.h3,{id:"\u4f9d\u8cf4\u9700\u6c42",children:"\u4f9d\u8cf4\u9700\u6c42"}),"\n",(0,t.jsx)(e.p,{children:"CommonBrick \u9700\u8981\u4ee5\u4e0b\u6838\u5fc3\u4f9d\u8cf4\uff1a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# \u6838\u5fc3\u4f9d\u8cf4\ngrpcio>=1.50.0              # gRPC \u6838\u5fc3\u5eab\ngrpcio-tools>=1.50.0        # gRPC \u5de5\u5177\uff08Protocol Buffer \u7de8\u8b6f\uff09\nprotobuf>=4.21.0            # Protocol Buffer \u652f\u63f4\ngoogle-protobuf>=4.21.0     # Google Protocol Buffer \u64f4\u5c55\n"})}),"\n",(0,t.jsx)(e.h3,{id:"\u81ea\u52d5\u5316\u5b89\u88dd\u6b65\u9a5f",children:"\u81ea\u52d5\u5316\u5b89\u88dd\u6b65\u9a5f"}),"\n",(0,t.jsx)(e.h4,{id:"1-\u5b89\u88dd-llmbrick-\u5957\u4ef6",children:"1. \u5b89\u88dd LLMBrick \u5957\u4ef6"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# \u5f9e PyPI \u5b89\u88dd\uff08\u63a8\u85a6\uff09\npip install llmbrick\n\n# \u6216\u5f9e\u6e90\u78bc\u5b89\u88dd\ngit clone https://github.com/JiHungLin/llmbrick.git\ncd llmbrick\npip install -e .\n"})}),"\n",(0,t.jsx)(e.h4,{id:"2-\u9a57\u8b49\u5b89\u88dd",children:"2. \u9a57\u8b49\u5b89\u88dd"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \u9a57\u8b49\u5b89\u88dd\u662f\u5426\u6210\u529f\nfrom llmbrick.bricks.common.common import CommonBrick\nfrom llmbrick.protocols.models.bricks.common_types import CommonRequest, CommonResponse\n\nprint("\u2705 CommonBrick \u5b89\u88dd\u6210\u529f\uff01")\n'})}),"\n",(0,t.jsx)(e.h4,{id:"3-\u958b\u767c\u74b0\u5883\u8a2d\u5b9a",children:"3. \u958b\u767c\u74b0\u5883\u8a2d\u5b9a"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# \u5b89\u88dd\u958b\u767c\u4f9d\u8cf4\npip install -r requirements-dev.txt\n\n# \u8a2d\u5b9a\u74b0\u5883\u8b8a\u6578\uff08\u53ef\u9078\uff09\nexport LLMBRICK_LOG_LEVEL=INFO\nexport LLMBRICK_GRPC_PORT=50051\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"\u9010\u6b65\u7bc4\u4f8b\u5f9e\u57fa\u790e\u5230\u9032\u968e",children:"\u9010\u6b65\u7bc4\u4f8b\uff1a\u5f9e\u57fa\u790e\u5230\u9032\u968e"}),"\n",(0,t.jsx)(e.h3,{id:"1-\u6700\u7c21\u55ae\u7684-commonbrick-\u4f7f\u7528",children:"1. \u6700\u7c21\u55ae\u7684 CommonBrick \u4f7f\u7528"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom llmbrick.bricks.common.common import CommonBrick\nfrom llmbrick.protocols.models.bricks.common_types import CommonRequest, CommonResponse\nfrom llmbrick.core.error_codes import ErrorCodes\n\nasync def basic_example():\n    """\u6700\u57fa\u672c\u7684 CommonBrick \u4f7f\u7528\u7bc4\u4f8b"""\n    \n    # \u5efa\u7acb CommonBrick \u5be6\u4f8b\n    brick = CommonBrick()\n    \n    # \u4f7f\u7528\u88dd\u98fe\u5668\u5b9a\u7fa9\u8655\u7406\u908f\u8f2f\n    @brick.unary()\n    async def echo_handler(request: CommonRequest) -> CommonResponse:\n        """\u7c21\u55ae\u7684\u56de\u97f3\u8655\u7406\u5668"""\n        message = request.data.get("message", "Hello, World!")\n        return CommonResponse(\n            data={"echo": f"\u6536\u5230\u8a0a\u606f: {message}"},\n            error=ErrorCodes.success()\n        )\n    \n    # \u57f7\u884c\u8acb\u6c42\n    request = CommonRequest(data={"message": "\u6e2c\u8a66\u8a0a\u606f"})\n    response = await brick.run_unary(request)\n    \n    print(f"\u56de\u61c9: {response.data}")\n    print(f"\u72c0\u614b: {response.error.message}")\n\n# \u57f7\u884c\u7bc4\u4f8b\nasyncio.run(basic_example())\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-\u985e\u5225\u7e7c\u627f\u65b9\u5f0f\u5b9a\u7fa9-commonbrick",children:"2. \u985e\u5225\u7e7c\u627f\u65b9\u5f0f\u5b9a\u7fa9 CommonBrick"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from typing import AsyncIterator\nfrom llmbrick.bricks.common.common import CommonBrick\nfrom llmbrick.protocols.models.bricks.common_types import (\n    CommonRequest, CommonResponse, ErrorDetail, ServiceInfoResponse, ModelInfo\n)\nfrom llmbrick.core.error_codes import ErrorCodes\nfrom llmbrick.core.brick import (\n    unary_handler, input_streaming_handler, output_streaming_handler, \n    bidi_streaming_handler, get_service_info_handler\n)\n\nclass TextProcessorBrick(CommonBrick):\n    """\u6587\u672c\u8655\u7406 Brick \u7bc4\u4f8b"""\n    \n    def __init__(self, processor_name: str = "TextProcessor", **kwargs):\n        super().__init__(**kwargs)\n        self.processor_name = processor_name\n        self.processed_count = 0\n    \n    @unary_handler\n    async def process_text(self, request: CommonRequest) -> CommonResponse:\n        """\u55ae\u6b21\u6587\u672c\u8655\u7406"""\n        try:\n            text = request.data.get("text", "")\n            if not text:\n                return CommonResponse(\n                    data={},\n                    error=ErrorCodes.parameter_invalid("text", "\u6587\u672c\u5167\u5bb9\u4e0d\u80fd\u70ba\u7a7a")\n                )\n            \n            # \u6a21\u64ec\u6587\u672c\u8655\u7406\u908f\u8f2f\n            processed_text = text.upper().strip()\n            self.processed_count += 1\n            \n            return CommonResponse(\n                data={\n                    "original": text,\n                    "processed": processed_text,\n                    "length": len(processed_text),\n                    "processor": self.processor_name\n                },\n                error=ErrorCodes.success()\n            )\n            \n        except Exception as e:\n            return CommonResponse(\n                data={},\n                error=ErrorCodes.internal_error(f"\u8655\u7406\u5931\u6557: {str(e)}")\n            )\n    \n    @output_streaming_handler\n    async def stream_process(self, request: CommonRequest) -> AsyncIterator[CommonResponse]:\n        """\u4e32\u6d41\u6587\u672c\u8655\u7406 - \u9010\u5b57\u8f38\u51fa"""\n        text = request.data.get("text", "")\n        if not text:\n            yield CommonResponse(\n                data={},\n                error=ErrorCodes.parameter_invalid("text")\n            )\n            return\n        \n        # \u9010\u5b57\u8655\u7406\u4e26\u4e32\u6d41\u8f38\u51fa\n        for i, char in enumerate(text):\n            await asyncio.sleep(0.1)  # \u6a21\u64ec\u8655\u7406\u5ef6\u9072\n            yield CommonResponse(\n                data={\n                    "position": i,\n                    "character": char,\n                    "is_alpha": char.isalpha(),\n                    "progress": f"{i+1}/{len(text)}"\n                },\n                error=ErrorCodes.success()\n            )\n    \n    @input_streaming_handler\n    async def batch_process(self, request_stream: AsyncIterator[CommonRequest]) -> CommonResponse:\n        """\u6279\u6b21\u8655\u7406\u8f38\u5165\u4e32\u6d41"""\n        texts = []\n        total_length = 0\n        \n        try:\n            async for request in request_stream:\n                text = request.data.get("text", "")\n                if text:  # \u5ffd\u7565\u7a7a\u6587\u672c\n                    texts.append(text)\n                    total_length += len(text)\n            \n            if not texts:\n                return CommonResponse(\n                    data={},\n                    error=ErrorCodes.parameter_invalid("texts", "\u81f3\u5c11\u9700\u8981\u4e00\u500b\u6709\u6548\u6587\u672c")\n                )\n            \n            # \u6279\u6b21\u8655\u7406\u7d50\u679c\n            processed_texts = [text.upper().strip() for text in texts]\n            \n            return CommonResponse(\n                data={\n                    "batch_size": len(texts),\n                    "total_length": total_length,\n                    "processed_texts": processed_texts,\n                    "average_length": total_length / len(texts)\n                },\n                error=ErrorCodes.success()\n            )\n            \n        except Exception as e:\n            return CommonResponse(\n                data={},\n                error=ErrorCodes.internal_error(f"\u6279\u6b21\u8655\u7406\u5931\u6557: {str(e)}")\n            )\n    \n    @bidi_streaming_handler\n    async def interactive_process(self, request_stream: AsyncIterator[CommonRequest]) -> AsyncIterator[CommonResponse]:\n        """\u96d9\u5411\u4e32\u6d41\u4e92\u52d5\u8655\u7406"""\n        session_id = f"session_{asyncio.get_event_loop().time()}"\n        message_count = 0\n        \n        try:\n            async for request in request_stream:\n                message_count += 1\n                text = request.data.get("text", "")\n                \n                if not text:\n                    yield CommonResponse(\n                        data={"session_id": session_id, "message_count": message_count},\n                        error=ErrorCodes.parameter_invalid("text", "\u6587\u672c\u4e0d\u80fd\u70ba\u7a7a")\n                    )\n                    continue\n                \n                # \u4e92\u52d5\u5f0f\u8655\u7406\u908f\u8f2f\n                if text.lower() == "exit":\n                    yield CommonResponse(\n                        data={\n                            "session_id": session_id,\n                            "message": "\u6703\u8a71\u7d50\u675f",\n                            "total_messages": message_count\n                        },\n                        error=ErrorCodes.success()\n                    )\n                    break\n                \n                # \u8655\u7406\u4e26\u56de\u61c9\n                processed = text.upper()\n                yield CommonResponse(\n                    data={\n                        "session_id": session_id,\n                        "message_count": message_count,\n                        "original": text,\n                        "processed": processed,\n                        "timestamp": asyncio.get_event_loop().time()\n                    },\n                    error=ErrorCodes.success()\n                )\n                \n        except Exception as e:\n            yield CommonResponse(\n                data={"session_id": session_id},\n                error=ErrorCodes.internal_error(f"\u4e92\u52d5\u8655\u7406\u5931\u6557: {str(e)}")\n            )\n    \n    @get_service_info_handler\n    async def get_service_info(self) -> ServiceInfoResponse:\n        """\u670d\u52d9\u8cc7\u8a0a\u67e5\u8a62"""\n        return ServiceInfoResponse(\n            service_name=f"{self.processor_name}Service",\n            version="1.0.0",\n            models=[\n                ModelInfo(\n                    model_id="text_processor_v1",\n                    version="1.0.0",\n                    supported_languages=["zh", "en"],\n                    support_streaming=True,\n                    description="\u901a\u7528\u6587\u672c\u8655\u7406\u6a21\u578b\uff0c\u652f\u63f4\u5927\u5c0f\u5beb\u8f49\u63db\u3001\u9577\u5ea6\u7d71\u8a08\u7b49\u529f\u80fd"\n                )\n            ],\n            error=ErrorCodes.success()\n        )\n\n# \u4f7f\u7528\u7bc4\u4f8b\nasync def advanced_example():\n    """\u9032\u968e\u4f7f\u7528\u7bc4\u4f8b"""\n    brick = TextProcessorBrick("AdvancedProcessor")\n    \n    # \u6e2c\u8a66\u55ae\u6b21\u8655\u7406\n    print("=== \u55ae\u6b21\u8655\u7406\u6e2c\u8a66 ===")\n    request = CommonRequest(data={"text": "hello world"})\n    response = await brick.run_unary(request)\n    print(f"\u8655\u7406\u7d50\u679c: {response.data}")\n    \n    # \u6e2c\u8a66\u4e32\u6d41\u8f38\u51fa\n    print("\\n=== \u4e32\u6d41\u8f38\u51fa\u6e2c\u8a66 ===")\n    request = CommonRequest(data={"text": "ABC"})\n    async for response in brick.run_output_streaming(request):\n        print(f"\u5b57\u7b26: {response.data}")\n    \n    # \u6e2c\u8a66\u670d\u52d9\u8cc7\u8a0a\n    print("\\n=== \u670d\u52d9\u8cc7\u8a0a ===")\n    info = await brick.run_get_service_info()\n    print(f"\u670d\u52d9: {info.service_name}, \u7248\u672c: {info.version}")\n    print(f"\u6a21\u578b: {info.models[0].model_id}")\n\nasyncio.run(advanced_example())\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-grpc-\u670d\u52d9\u7aef\u5efa\u7acb\u8207\u90e8\u7f72",children:"3. gRPC \u670d\u52d9\u7aef\u5efa\u7acb\u8207\u90e8\u7f72"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# grpc_server.py\nimport asyncio\nfrom llmbrick.servers.grpc.server import GrpcServer\nfrom text_processor_brick import TextProcessorBrick\n\nasync def start_grpc_server():\n    """\u555f\u52d5 gRPC \u670d\u52d9\u7aef"""\n    \n    # \u5efa\u7acb gRPC \u670d\u52d9\u5668\n    server = GrpcServer(\n        port=50051,\n        max_workers=10,\n        options=[\n            (\'grpc.keepalive_time_ms\', 30000),\n            (\'grpc.keepalive_timeout_ms\', 5000),\n            (\'grpc.keepalive_permit_without_calls\', True),\n            (\'grpc.http2.max_pings_without_data\', 0),\n            (\'grpc.http2.min_time_between_pings_ms\', 10000),\n            (\'grpc.http2.min_ping_interval_without_data_ms\', 300000)\n        ]\n    )\n    \n    # \u5efa\u7acb\u4e26\u8a3b\u518a Brick \u670d\u52d9\n    text_processor = TextProcessorBrick(\n        processor_name="ProductionTextProcessor",\n        verbose=True  # \u555f\u7528\u8a73\u7d30\u65e5\u8a8c\n    )\n    \n    server.register_service(text_processor)\n    \n    print("\ud83d\ude80 gRPC \u670d\u52d9\u5668\u555f\u52d5\u4e2d...")\n    print(f"\ud83d\udce1 \u76e3\u807d\u5730\u5740: localhost:50051")\n    print(f"\ud83d\udd27 \u670d\u52d9\u540d\u7a31: {text_processor.processor_name}")\n    \n    try:\n        await server.start()\n    except KeyboardInterrupt:\n        print("\\n\u23f9\ufe0f  \u670d\u52d9\u5668\u95dc\u9589\u4e2d...")\n        await server.stop()\n\nif __name__ == "__main__":\n    asyncio.run(start_grpc_server())\n'})}),"\n",(0,t.jsx)(e.h3,{id:"4-grpc-\u5ba2\u6236\u7aef\u9023\u63a5\u8207\u4f7f\u7528",children:"4. gRPC \u5ba2\u6236\u7aef\u9023\u63a5\u8207\u4f7f\u7528"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# grpc_client.py\nimport asyncio\nfrom llmbrick.bricks.common.common import CommonBrick\nfrom llmbrick.protocols.models.bricks.common_types import CommonRequest\n\nasync def grpc_client_example():\n    """gRPC \u5ba2\u6236\u7aef\u4f7f\u7528\u7bc4\u4f8b"""\n    \n    # \u5efa\u7acb gRPC \u5ba2\u6236\u7aef\n    client = CommonBrick.toGrpcClient("localhost:50051")\n    \n    print("\ud83d\udd17 \u9023\u63a5\u5230 gRPC \u670d\u52d9\u5668...")\n    \n    try:\n        # 1. \u67e5\u8a62\u670d\u52d9\u8cc7\u8a0a\n        print("\\n=== \u670d\u52d9\u8cc7\u8a0a\u67e5\u8a62 ===")\n        service_info = await client.run_get_service_info()\n        print(f"\u670d\u52d9\u540d\u7a31: {service_info.service_name}")\n        print(f"\u7248\u672c: {service_info.version}")\n        if service_info.models:\n            model = service_info.models[0]\n            print(f"\u6a21\u578b: {model.model_id} (v{model.version})")\n            print(f"\u652f\u63f4\u8a9e\u8a00: {\', \'.join(model.supported_languages)}")\n            print(f"\u652f\u63f4\u4e32\u6d41: {\'\u662f\' if model.support_streaming else \'\u5426\'}")\n        \n        # 2. \u55ae\u6b21\u8acb\u6c42\u6e2c\u8a66\n        print("\\n=== \u55ae\u6b21\u8acb\u6c42\u6e2c\u8a66 ===")\n        request = CommonRequest(data={"text": "hello grpc world"})\n        response = await client.run_unary(request)\n        \n        if response.error.code == 200:\n            print(f"\u2705 \u8655\u7406\u6210\u529f")\n            print(f"\u539f\u6587: {response.data[\'original\']}")\n            print(f"\u8655\u7406\u5f8c: {response.data[\'processed\']}")\n            print(f"\u9577\u5ea6: {response.data[\'length\']}")\n        else:\n            print(f"\u274c \u8655\u7406\u5931\u6557: {response.error.message}")\n        \n        # 3. \u4e32\u6d41\u8f38\u51fa\u6e2c\u8a66\n        print("\\n=== \u4e32\u6d41\u8f38\u51fa\u6e2c\u8a66 ===")\n        request = CommonRequest(data={"text": "Stream"})\n        print("\u4e32\u6d41\u8655\u7406\u4e2d...")\n        \n        async for response in client.run_output_streaming(request):\n            if response.error.code == 200:\n                data = response.data\n                print(f"\u4f4d\u7f6e {data[\'position\']}: \'{data[\'character\']}\' "\n                      f"({\'\u5b57\u6bcd\' if data[\'is_alpha\'] else \'\u975e\u5b57\u6bcd\'}) "\n                      f"\u9032\u5ea6: {data[\'progress\']}")\n            else:\n                print(f"\u274c \u4e32\u6d41\u932f\u8aa4: {response.error.message}")\n                break\n        \n        # 4. \u8f38\u5165\u4e32\u6d41\u6e2c\u8a66\n        print("\\n=== \u8f38\u5165\u4e32\u6d41\u6e2c\u8a66 ===")\n        \n        async def input_generator():\n            """\u751f\u6210\u8f38\u5165\u4e32\u6d41"""\n            texts = ["Hello", "gRPC", "Streaming", "World"]\n            for text in texts:\n                print(f"\ud83d\udce4 \u767c\u9001: {text}")\n                yield CommonRequest(data={"text": text})\n                await asyncio.sleep(0.5)\n        \n        response = await client.run_input_streaming(input_generator())\n        if response.error.code == 200:\n            print(f"\u2705 \u6279\u6b21\u8655\u7406\u5b8c\u6210")\n            print(f"\u8655\u7406\u6578\u91cf: {response.data[\'batch_size\']}")\n            print(f"\u7e3d\u9577\u5ea6: {response.data[\'total_length\']}")\n            print(f"\u5e73\u5747\u9577\u5ea6: {response.data[\'average_length\']:.2f}")\n        else:\n            print(f"\u274c \u6279\u6b21\u8655\u7406\u5931\u6557: {response.error.message}")\n        \n        # 5. \u96d9\u5411\u4e32\u6d41\u6e2c\u8a66\n        print("\\n=== \u96d9\u5411\u4e32\u6d41\u6e2c\u8a66 ===")\n        \n        async def bidi_input_generator():\n            """\u751f\u6210\u96d9\u5411\u4e32\u6d41\u8f38\u5165"""\n            messages = ["hello", "how are you", "grpc is great", "exit"]\n            for msg in messages:\n                print(f"\ud83d\udce4 \u767c\u9001: {msg}")\n                yield CommonRequest(data={"text": msg})\n                await asyncio.sleep(1)\n        \n        print("\u96d9\u5411\u4e32\u6d41\u901a\u8a0a\u4e2d...")\n        async for response in client.run_bidi_streaming(bidi_input_generator()):\n            if response.error.code == 200:\n                data = response.data\n                if "message" in data:  # \u7d50\u675f\u8a0a\u606f\n                    print(f"\ud83c\udfc1 {data[\'message\']}, \u7e3d\u8a0a\u606f\u6578: {data[\'total_messages\']}")\n                else:  # \u6b63\u5e38\u8655\u7406\u8a0a\u606f\n                    print(f"\ud83d\udce5 \u6536\u5230\u56de\u61c9 #{data[\'message_count\']}: "\n                          f"\'{data[\'original\']}\' -> \'{data[\'processed\']}\'")\n            else:\n                print(f"\u274c \u96d9\u5411\u4e32\u6d41\u932f\u8aa4: {response.error.message}")\n                break\n    \n    except Exception as e:\n        print(f"\u274c \u5ba2\u6236\u7aef\u932f\u8aa4: {str(e)}")\n    \n    print("\\n\ud83d\udd1a \u5ba2\u6236\u7aef\u6e2c\u8a66\u5b8c\u6210")\n\nif __name__ == "__main__":\n    asyncio.run(grpc_client_example())\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"\u6838\u5fc3-api--\u985e\u5225--\u51fd\u5f0f\u6df1\u5ea6\u89e3\u6790",children:"\u6838\u5fc3 API / \u985e\u5225 / \u51fd\u5f0f\u6df1\u5ea6\u89e3\u6790"}),"\n",(0,t.jsxs)(e.h3,{id:"commonbrick-\u985e\u5225",children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/bricks/common/common.py#L15",children:(0,t.jsx)(e.code,{children:"CommonBrick"})})," \u985e\u5225"]}),"\n",(0,t.jsx)(e.h4,{id:"\u985e\u5225\u7c3d\u540d\u8207\u7e7c\u627f\u95dc\u4fc2",children:"\u985e\u5225\u7c3d\u540d\u8207\u7e7c\u627f\u95dc\u4fc2"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'class CommonBrick(BaseBrick[CommonRequest, CommonResponse]):\n    """\n    CommonBrick: \u57fa\u65bc BaseBrick \u7684\u901a\u7528\u670d\u52d9\n    \n    \u6cdb\u578b\u53c3\u6578:\n        InputT: CommonRequest - \u8f38\u5165\u8acb\u6c42\u985e\u578b\n        OutputT: CommonResponse - \u8f38\u51fa\u56de\u61c9\u985e\u578b\n    """\n    brick_type = BrickType.COMMON  # \u6a19\u8b58\u70ba COMMON \u985e\u578b Brick\n'})}),"\n",(0,t.jsx)(e.h4,{id:"\u6838\u5fc3\u65b9\u6cd5\u8a73\u89e3",children:"\u6838\u5fc3\u65b9\u6cd5\u8a73\u89e3"}),"\n",(0,t.jsxs)(e.h5,{id:"togrpcclient---grpc-\u5ba2\u6236\u7aef\u8f49\u63db",children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/bricks/common/common.py#L37",children:(0,t.jsx)(e.code,{children:"toGrpcClient()"})})," - gRPC \u5ba2\u6236\u7aef\u8f49\u63db"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"@classmethod\ndef toGrpcClient(cls, remote_address: str, **kwargs) -> CommonBrick\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u529f\u80fd"}),"\uff1a\u5c07 CommonBrick \u8f49\u63db\u70ba\u7570\u6b65 gRPC \u5ba2\u6236\u7aef"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u53c3\u6578\u8a73\u89e3"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"remote_address: str"})," - gRPC \u4f3a\u670d\u5668\u5730\u5740","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u683c\u5f0f\uff1a",(0,t.jsx)(e.code,{children:'"host:port"'}),"\uff08\u5982 ",(0,t.jsx)(e.code,{children:'"localhost:50051"'}),"\uff09"]}),"\n",(0,t.jsx)(e.li,{children:"\u652f\u63f4 IPv4/IPv6 \u5730\u5740"}),"\n",(0,t.jsx)(e.li,{children:"\u652f\u63f4\u57df\u540d\u89e3\u6790"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"**kwargs"})," - \u50b3\u905e\u7d66 CommonBrick \u5efa\u69cb\u5b50\u7684\u984d\u5916\u53c3\u6578","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"verbose: bool = True"})," - \u662f\u5426\u555f\u7528\u8a73\u7d30\u65e5\u8a8c"]}),"\n",(0,t.jsx)(e.li,{children:"\u5176\u4ed6\u81ea\u8a02\u521d\u59cb\u5316\u53c3\u6578"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u56de\u50b3\u503c"}),"\uff1a\u914d\u7f6e\u70ba gRPC \u5ba2\u6236\u7aef\u7684 CommonBrick \u5be6\u4f8b"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u5167\u90e8\u5be6\u4f5c\u539f\u7406"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"\u5efa\u7acb CommonBrick \u5be6\u4f8b"}),"\n",(0,t.jsx)(e.li,{children:"\u70ba\u6bcf\u7a2e\u901a\u8a0a\u6a21\u5f0f\u52d5\u614b\u8a3b\u518a gRPC \u8655\u7406\u5668"}),"\n",(0,t.jsx)(e.li,{children:"\u6bcf\u500b\u8655\u7406\u5668\u5167\u90e8\u5efa\u7acb gRPC \u901a\u9053\u548c\u5ba2\u6236\u7aef\u5b58\u6839"}),"\n",(0,t.jsx)(e.li,{children:"\u81ea\u52d5\u8655\u7406 Protocol Buffer \u8207 Python \u7269\u4ef6\u8f49\u63db"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4f7f\u7528\u7bc4\u4f8b"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \u57fa\u672c\u7528\u6cd5\nclient = CommonBrick.toGrpcClient("localhost:50051")\n\n# \u5e36\u53c3\u6578\u7528\u6cd5\nclient = CommonBrick.toGrpcClient(\n    "production-server:443",\n    verbose=False\n)\n\n# \u4f7f\u7528\u5ba2\u6236\u7aef\nrequest = CommonRequest(data={"message": "Hello"})\nresponse = await client.run_unary(request)\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u6ce8\u610f\u4e8b\u9805"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u6bcf\u6b21\u8abf\u7528\u6703\u5efa\u7acb\u65b0\u7684 gRPC \u901a\u9053\uff0c\u9069\u5408\u77ed\u671f\u4f7f\u7528"}),"\n",(0,t.jsx)(e.li,{children:"\u9577\u671f\u4f7f\u7528\u5efa\u8b70\u5be6\u4f5c\u9023\u7dda\u6c60\u7ba1\u7406"}),"\n",(0,t.jsx)(e.li,{children:"\u81ea\u52d5\u8655\u7406\u9023\u7dda\u932f\u8aa4\u548c\u91cd\u8a66\u6a5f\u5236"}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"\u6a19\u6e96\u57f7\u884c\u65b9\u6cd5",children:"\u6a19\u6e96\u57f7\u884c\u65b9\u6cd5"}),"\n",(0,t.jsxs)(e.h5,{id:"run_unary---\u55ae\u6b21\u8acb\u6c42\u57f7\u884c",children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/brick.py#L233",children:(0,t.jsx)(e.code,{children:"run_unary()"})})," - \u55ae\u6b21\u8acb\u6c42\u57f7\u884c"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"async def run_unary(self, input_data: CommonRequest) -> CommonResponse\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u529f\u80fd"}),"\uff1a\u57f7\u884c\u55ae\u6b21\u8acb\u6c42/\u56de\u61c9\u8655\u7406"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u53c3\u6578"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"input_data: CommonRequest"})," - \u8f38\u5165\u8acb\u6c42\u7269\u4ef6"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u56de\u50b3"}),"\uff1a",(0,t.jsx)(e.code,{children:"CommonResponse"})," - \u8655\u7406\u7d50\u679c"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4f7f\u7528\u5834\u666f"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u7c21\u55ae\u7684\u8cc7\u6599\u8f49\u63db"}),"\n",(0,t.jsx)(e.li,{children:"\u72c0\u614b\u67e5\u8a62"}),"\n",(0,t.jsx)(e.li,{children:"\u9a57\u8b49\u64cd\u4f5c"}),"\n",(0,t.jsx)(e.li,{children:"\u8a08\u7b97\u4efb\u52d9"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7bc4\u4f8b"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'brick = CommonBrick()\n\n@brick.unary()\nasync def calculator(request: CommonRequest) -> CommonResponse:\n    a = request.data.get("a", 0)\n    b = request.data.get("b", 0)\n    operation = request.data.get("operation", "add")\n    \n    if operation == "add":\n        result = a + b\n    elif operation == "multiply":\n        result = a * b\n    else:\n        return CommonResponse(\n            error=ErrorCodes.parameter_invalid("operation")\n        )\n    \n    return CommonResponse(\n        data={"result": result},\n        error=ErrorCodes.success()\n    )\n\n# \u4f7f\u7528\nrequest = CommonRequest(data={"a": 10, "b": 5, "operation": "add"})\nresponse = await brick.run_unary(request)\nprint(response.data["result"])  # 15\n'})}),"\n",(0,t.jsxs)(e.h5,{id:"run_output_streaming---\u8f38\u51fa\u4e32\u6d41\u57f7\u884c",children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/brick.py#L258",children:(0,t.jsx)(e.code,{children:"run_output_streaming()"})})," - \u8f38\u51fa\u4e32\u6d41\u57f7\u884c"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"async def run_output_streaming(self, input_data: CommonRequest) -> AsyncIterator[CommonResponse]\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u529f\u80fd"}),"\uff1a\u57f7\u884c\u8f38\u51fa\u4e32\u6d41\u8655\u7406\uff0c\u5f9e\u55ae\u4e00\u8f38\u5165\u7522\u751f\u591a\u500b\u8f38\u51fa"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u53c3\u6578"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"input_data: CommonRequest"})," - \u8f38\u5165\u8acb\u6c42\u7269\u4ef6"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u56de\u50b3"}),"\uff1a",(0,t.jsx)(e.code,{children:"AsyncIterator[CommonResponse]"})," - \u7570\u6b65\u56de\u61c9\u8fed\u4ee3\u5668"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4f7f\u7528\u5834\u666f"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5927\u578b\u8cc7\u6599\u5206\u9801\u8f38\u51fa"}),"\n",(0,t.jsx)(e.li,{children:"\u5373\u6642\u8cc7\u6599\u4e32\u6d41"}),"\n",(0,t.jsx)(e.li,{children:"\u9577\u6642\u9593\u8655\u7406\u7684\u9032\u5ea6\u56de\u5831"}),"\n",(0,t.jsx)(e.li,{children:"\u804a\u5929\u6a5f\u5668\u4eba\u56de\u61c9\u751f\u6210"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7bc4\u4f8b"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'@brick.output_streaming()\nasync def data_paginator(request: CommonRequest) -> AsyncIterator[CommonResponse]:\n    """\u8cc7\u6599\u5206\u9801\u4e32\u6d41\u8f38\u51fa"""\n    page_size = request.data.get("page_size", 10)\n    total_items = request.data.get("total_items", 100)\n    \n    for page in range(0, total_items, page_size):\n        # \u6a21\u64ec\u8cc7\u6599\u5eab\u67e5\u8a62\n        await asyncio.sleep(0.1)\n        \n        items = [f"item_{i}" for i in range(page, min(page + page_size, total_items))]\n        \n        yield CommonResponse(\n            data={\n                "page": page // page_size + 1,\n                "items": items,\n                "has_more": page + page_size < total_items\n            },\n            error=ErrorCodes.success()\n        )\n\n# \u4f7f\u7528\nrequest = CommonRequest(data={"page_size": 5, "total_items": 23})\nasync for response in brick.run_output_streaming(request):\n    print(f"\u7b2c {response.data[\'page\']} \u9801: {response.data[\'items\']}")\n'})}),"\n",(0,t.jsxs)(e.h5,{id:"run_input_streaming---\u8f38\u5165\u4e32\u6d41\u57f7\u884c",children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/brick.py#L274",children:(0,t.jsx)(e.code,{children:"run_input_streaming()"})})," - \u8f38\u5165\u4e32\u6d41\u57f7\u884c"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"async def run_input_streaming(self, input_stream: AsyncIterator[CommonRequest]) -> CommonResponse\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u529f\u80fd"}),"\uff1a\u57f7\u884c\u8f38\u5165\u4e32\u6d41\u8655\u7406\uff0c\u5f9e\u591a\u500b\u8f38\u5165\u7522\u751f\u55ae\u4e00\u8f38\u51fa"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u53c3\u6578"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"input_stream: AsyncIterator[CommonRequest]"})," - \u8f38\u5165\u8acb\u6c42\u4e32\u6d41"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u56de\u50b3"}),"\uff1a",(0,t.jsx)(e.code,{children:"CommonResponse"})," - \u6700\u7d42\u8655\u7406\u7d50\u679c"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4f7f\u7528\u5834\u666f"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u6279\u6b21\u8cc7\u6599\u8655\u7406"}),"\n",(0,t.jsx)(e.li,{children:"\u6a94\u6848\u4e0a\u50b3\u8655\u7406"}),"\n",(0,t.jsx)(e.li,{children:"\u8cc7\u6599\u805a\u5408\u5206\u6790"}),"\n",(0,t.jsx)(e.li,{children:"\u4e32\u6d41\u8cc7\u6599\u6536\u96c6"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7bc4\u4f8b"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'@brick.input_streaming()\nasync def batch_analyzer(request_stream: AsyncIterator[CommonRequest]) -> CommonResponse:\n    """\u6279\u6b21\u8cc7\u6599\u5206\u6790"""\n    total_count = 0\n    sum_values = 0\n    categories = {}\n    \n    async for request in request_stream:\n        value = request.data.get("value", 0)\n        category = request.data.get("category", "unknown")\n        \n        total_count += 1\n        sum_values += value\n        categories[category] = categories.get(category, 0) + 1\n    \n    if total_count == 0:\n        return CommonResponse(\n            error=ErrorCodes.parameter_invalid("input_stream", "\u6c92\u6709\u6536\u5230\u4efb\u4f55\u8cc7\u6599")\n        )\n    \n    return CommonResponse(\n        data={\n            "total_count": total_count,\n            "average_value": sum_values / total_count,\n            "categories": categories,\n            "summary": f"\u8655\u7406\u4e86 {total_count} \u7b46\u8cc7\u6599\uff0c\u5e73\u5747\u503c\u70ba {sum_values/total_count:.2f}"\n        },\n        error=ErrorCodes.success()\n    )\n\n# \u4f7f\u7528\nasync def data_generator():\n    data_points = [\n        {"value": 10, "category": "A"},\n        {"value": 20, "category": "B"},\n        {"value": 15, "category": "A"},\n        {"value": 25, "category": "C"}\n    ]\n    for point in data_points:\n        yield CommonRequest(data=point)\n\nresponse = await brick.run_input_streaming(data_generator())\nprint(response.data["summary"])\n'})}),"\n",(0,t.jsxs)(e.h5,{id:"run_bidi_streaming---\u96d9\u5411\u4e32\u6d41\u57f7\u884c",children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/brick.py#L288",children:(0,t.jsx)(e.code,{children:"run_bidi_streaming()"})})," - \u96d9\u5411\u4e32\u6d41\u57f7\u884c"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"async def run_bidi_streaming(self, input_stream: AsyncIterator[CommonRequest]) -> AsyncIterator[CommonResponse]\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u529f\u80fd"}),"\uff1a\u57f7\u884c\u96d9\u5411\u4e32\u6d41\u8655\u7406\uff0c\u5373\u6642\u8655\u7406\u8f38\u5165\u4e26\u7522\u751f\u8f38\u51fa"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u53c3\u6578"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"input_stream: AsyncIterator[CommonRequest]"})," - \u8f38\u5165\u8acb\u6c42\u4e32\u6d41"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u56de\u50b3"}),"\uff1a",(0,t.jsx)(e.code,{children:"AsyncIterator[CommonResponse]"})," - \u8f38\u51fa\u56de\u61c9\u4e32\u6d41"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4f7f\u7528\u5834\u666f"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u5373\u6642\u804a\u5929\u7cfb\u7d71"}),"\n",(0,t.jsx)(e.li,{children:"\u4e92\u52d5\u5f0f\u8cc7\u6599\u8655\u7406"}),"\n",(0,t.jsx)(e.li,{children:"\u5373\u6642\u7ffb\u8b6f\u670d\u52d9"}),"\n",(0,t.jsx)(e.li,{children:"\u904a\u6232\u72c0\u614b\u540c\u6b65"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7bc4\u4f8b"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'@brick.bidi_streaming()\nasync def chat_processor(request_stream: AsyncIterator[CommonRequest]) -> AsyncIterator[CommonResponse]:\n    """\u804a\u5929\u8655\u7406\u5668"""\n    conversation_history = []\n    \n    async for request in request_stream:\n        message = request.data.get("message", "")\n        user_id = request.data.get("user_id", "anonymous")\n        \n        if not message:\n            yield CommonResponse(\n                error=ErrorCodes.parameter_invalid("message")\n            )\n            continue\n        \n        # \u8a18\u9304\u5c0d\u8a71\u6b77\u53f2\n        conversation_history.append(f"{user_id}: {message}")\n        \n        # \u7c21\u55ae\u7684\u56de\u61c9\u908f\u8f2f\n        if message.lower() == "history":\n            response_text = "\\n".join(conversation_history[-5:])  # \u6700\u8fd15\u689d\n        elif message.lower() == "clear":\n            conversation_history.clear()\n            response_text = "\u5c0d\u8a71\u6b77\u53f2\u5df2\u6e05\u9664"\n        else:\n            response_text = f"\u6536\u5230\u4f86\u81ea {user_id} \u7684\u8a0a\u606f: {message}"\n        \n        yield CommonResponse(\n            data={\n                "response": response_text,\n                "timestamp": asyncio.get_event_loop().time(),\n                "conversation_length": len(conversation_history)\n            },\n            error=ErrorCodes.success()\n        )\n\n# \u4f7f\u7528\nasync def chat_input():\n    messages = [\n        {"message": "Hello", "user_id": "Alice"},\n        {"message": "How are you?", "user_id": "Bob"},\n        {"message": "history", "user_id": "Alice"}\n    ]\n    for msg in messages:\n        yield CommonRequest(data=msg)\n        await asyncio.sleep(1)\n\nasync for response in brick.run_bidi_streaming(chat_input()):\n    print(response.data["response"])\n'})}),"\n",(0,t.jsxs)(e.h5,{id:"run_get_service_info---\u670d\u52d9\u8cc7\u8a0a\u67e5\u8a62",children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/brick.py#L245",children:(0,t.jsx)(e.code,{children:"run_get_service_info()"})})," - \u670d\u52d9\u8cc7\u8a0a\u67e5\u8a62"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"async def run_get_service_info(self) -> ServiceInfoResponse\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u529f\u80fd"}),"\uff1a\u67e5\u8a62\u670d\u52d9\u7684\u57fa\u672c\u8cc7\u8a0a\u548c\u80fd\u529b"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u56de\u50b3"}),"\uff1a",(0,t.jsx)(e.code,{children:"ServiceInfoResponse"})," - \u670d\u52d9\u8cc7\u8a0a\u7269\u4ef6"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4f7f\u7528\u5834\u666f"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u670d\u52d9\u767c\u73fe"}),"\n",(0,t.jsx)(e.li,{children:"\u5065\u5eb7\u6aa2\u67e5"}),"\n",(0,t.jsx)(e.li,{children:"\u80fd\u529b\u67e5\u8a62"}),"\n",(0,t.jsx)(e.li,{children:"\u7248\u672c\u6aa2\u67e5"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7bc4\u4f8b"}),"\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'@brick.get_service_info()\nasync def service_info() -> ServiceInfoResponse:\n    """\u670d\u52d9\u8cc7\u8a0a\u63d0\u4f9b"""\n    return ServiceInfoResponse(\n        service_name="MyAdvancedService",\n        version="2.1.0",\n        models=[\n            ModelInfo(\n                model_id="text_processor",\n                version="1.0.0",\n                supported_languages=["zh-TW", "zh-CN", "en-US"],\n                support_streaming=True,\n                description="\u9ad8\u6548\u80fd\u6587\u672c\u8655\u7406\u6a21\u578b"\n            ),\n            ModelInfo(\n                model_id="data_analyzer",\n                version="1.2.0",\n                supported_languages=["universal"],\n                support_streaming=False,\n                description="\u901a\u7528\u8cc7\u6599\u5206\u6790\u6a21\u578b"\n            )\n        ],\n        error=ErrorCodes.success()\n    )\n\n# \u4f7f\u7528\ninfo = await brick.run_get_service_info()\nprint(f"\u670d\u52d9: {info.service_name} v{info.version}")\nfor model in info.models:\n    print(f"  \u6a21\u578b: {model.model_id} - {model.description}")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"\u88dd\u98fe\u5668\u7cfb\u7d71\u8a73\u89e3",children:"\u88dd\u98fe\u5668\u7cfb\u7d71\u8a73\u89e3"}),"\n",(0,t.jsxs)(e.p,{children:["CommonBrick \u63d0\u4f9b\u5169\u5957\u88dd\u98fe\u5668\u7cfb\u7d71\uff1a",(0,t.jsx)(e.strong,{children:"\u5be6\u4f8b\u88dd\u98fe\u5668"}),"\uff08\u52d5\u614b\u8a3b\u518a\uff09\u548c",(0,t.jsx)(e.strong,{children:"\u985e\u5225\u88dd\u98fe\u5668"}),"\uff08\u975c\u614b\u8a3b\u518a\uff09\u3002"]}),"\n",(0,t.jsx)(e.h4,{id:"\u5be6\u4f8b\u88dd\u98fe\u5668\u63a8\u85a6\u7528\u65bc\u52d5\u614b\u5834\u666f",children:"\u5be6\u4f8b\u88dd\u98fe\u5668\uff08\u63a8\u85a6\u7528\u65bc\u52d5\u614b\u5834\u666f\uff09"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \u5efa\u7acb Brick \u5be6\u4f8b\nbrick = CommonBrick()\n\n# \u4f7f\u7528\u5be6\u4f8b\u88dd\u98fe\u5668\u52d5\u614b\u8a3b\u518a\u8655\u7406\u5668\n@brick.unary()\nasync def dynamic_handler(request: CommonRequest) -> CommonResponse:\n    return CommonResponse(data={"type": "dynamic"})\n\n@brick.output_streaming()\nasync def dynamic_streaming(request: CommonRequest) -> AsyncIterator[CommonResponse]:\n    for i in range(3):\n        yield CommonResponse(data={"count": i})\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u512a\u9ede"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u9748\u6d3b\u6027\u9ad8\uff0c\u53ef\u5728\u904b\u884c\u6642\u52d5\u614b\u8a3b\u518a"}),"\n",(0,t.jsx)(e.li,{children:"\u9069\u5408\u63d2\u4ef6\u7cfb\u7d71\u548c\u52d5\u614b\u914d\u7f6e"}),"\n",(0,t.jsx)(e.li,{children:"\u53ef\u4ee5\u6709\u689d\u4ef6\u5730\u8a3b\u518a\u8655\u7406\u5668"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7f3a\u9ede"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u9700\u8981\u5148\u5efa\u7acb\u5be6\u4f8b"}),"\n",(0,t.jsx)(e.li,{children:"\u4e0d\u9069\u5408\u985e\u5225\u7e7c\u627f\u5834\u666f"}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"\u985e\u5225\u88dd\u98fe\u5668\u63a8\u85a6\u7528\u65bc\u7e7c\u627f\u5834\u666f",children:"\u985e\u5225\u88dd\u98fe\u5668\uff08\u63a8\u85a6\u7528\u65bc\u7e7c\u627f\u5834\u666f\uff09"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from llmbrick.core.brick import unary_handler, output_streaming_handler\n\nclass MyBrick(CommonBrick):\n    @unary_handler\n    async def static_handler(self, request: CommonRequest) -> CommonResponse:\n        return CommonResponse(data={"type": "static"})\n    \n    @output_streaming_handler\n    async def static_streaming(self, request: CommonRequest) -> AsyncIterator[CommonResponse]:\n        for i in range(3):\n            yield CommonResponse(data={"count": i})\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u512a\u9ede"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u6e05\u6670\u7684\u985e\u5225\u7d50\u69cb"}),"\n",(0,t.jsx)(e.li,{children:"\u81ea\u52d5\u8a3b\u518a\uff0c\u7121\u9700\u984d\u5916\u6b65\u9a5f"}),"\n",(0,t.jsx)(e.li,{children:"\u9069\u5408\u7269\u4ef6\u5c0e\u5411\u8a2d\u8a08"}),"\n",(0,t.jsx)(e.li,{children:"\u652f\u63f4\u7e7c\u627f\u548c\u591a\u578b"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u7f3a\u9ede"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u975c\u614b\u8a3b\u518a\uff0c\u904b\u884c\u6642\u7121\u6cd5\u4fee\u6539"}),"\n",(0,t.jsx)(e.li,{children:"\u6bcf\u500b\u985e\u5225\u53ea\u80fd\u6709\u4e00\u500b\u540c\u985e\u578b\u8655\u7406\u5668"}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"\u6548\u80fd\u512a\u5316\u8207\u6700\u4f73\u5be6\u8e10",children:"\u6548\u80fd\u512a\u5316\u8207\u6700\u4f73\u5be6\u8e10"}),"\n",(0,t.jsx)(e.h3,{id:"1-\u7570\u6b65\u8655\u7406\u512a\u5316",children:"1. \u7570\u6b65\u8655\u7406\u512a\u5316"}),"\n",(0,t.jsx)(e.h4,{id:"\u4e26\u767c\u63a7\u5236",children:"\u4e26\u767c\u63a7\u5236"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom asyncio import Semaphore\nfrom typing import List, AsyncIterator\nfrom llmbrick.bricks.common.common import CommonBrick\nfrom llmbrick.protocols.models.bricks.common_types import CommonRequest, CommonResponse\n\nclass HighPerformanceBrick(CommonBrick):\n    """\u9ad8\u6548\u80fd CommonBrick \u5be6\u4f5c"""\n    \n    def __init__(self, \n                 max_concurrent_requests: int = 100,\n                 request_timeout: float = 30.0,\n                 **kwargs):\n        super().__init__(**kwargs)\n        \n        # \u4e26\u767c\u63a7\u5236\n        self.semaphore = Semaphore(max_concurrent_requests)\n        self.request_timeout = request_timeout\n        \n        # \u6548\u80fd\u6307\u6a19\n        self.performance_stats = {\n            "total_requests": 0,\n            "concurrent_requests": 0,\n            "max_concurrent": 0,\n            "average_response_time": 0.0,\n            "total_response_time": 0.0\n        }\n    \n    async def _with_concurrency_control(self, coro):\n        """\u4e26\u767c\u63a7\u5236\u5305\u88dd\u5668"""\n        async with self.semaphore:\n            self.performance_stats["concurrent_requests"] += 1\n            self.performance_stats["max_concurrent"] = max(\n                self.performance_stats["max_\n\nconcurrent"],\n                self.performance_stats["concurrent_requests"]\n            )\n            \n            start_time = asyncio.get_event_loop().time()\n            \n            try:\n                result = await asyncio.wait_for(coro, timeout=self.request_timeout)\n                \n                # \u66f4\u65b0\u6548\u80fd\u7d71\u8a08\n                response_time = asyncio.get_event_loop().time() - start_time\n                self.performance_stats["total_requests"] += 1\n                self.performance_stats["total_response_time"] += response_time\n                self.performance_stats["average_response_time"] = (\n                    self.performance_stats["total_response_time"] / \n                    self.performance_stats["total_requests"]\n                )\n                \n                return result\n                \n            finally:\n                self.performance_stats["concurrent_requests"] -= 1\n    \n    @unary_handler\n    async def high_performance_handler(self, request: CommonRequest) -> CommonResponse:\n        """\u9ad8\u6548\u80fd\u8655\u7406\u5668"""\n        \n        async def process_request():\n            # \u6a21\u64ec\u8655\u7406\u908f\u8f2f\n            data = request.data\n            operation = data.get("operation", "default")\n            \n            if operation == "cpu_intensive":\n                # CPU \u5bc6\u96c6\u578b\u4efb\u52d9\n                result = await self._cpu_intensive_task(data)\n            elif operation == "io_intensive":\n                # I/O \u5bc6\u96c6\u578b\u4efb\u52d9\n                result = await self._io_intensive_task(data)\n            else:\n                # \u4e00\u822c\u8655\u7406\n                result = {"processed": True, "data": data}\n            \n            return CommonResponse(\n                data=result,\n                error=ErrorCodes.success()\n            )\n        \n        return await self._with_concurrency_control(process_request())\n    \n    async def _cpu_intensive_task(self, data: dict) -> dict:\n        """CPU \u5bc6\u96c6\u578b\u4efb\u52d9\uff08\u5728\u57f7\u884c\u5668\u4e2d\u904b\u884c\uff09"""\n        import concurrent.futures\n        \n        def cpu_work():\n            # \u6a21\u64ec CPU \u5bc6\u96c6\u578b\u8a08\u7b97\n            result = sum(i * i for i in range(10000))\n            return {"computation_result": result, "input": data}\n        \n        # \u5728\u7dda\u7a0b\u6c60\u4e2d\u57f7\u884c CPU \u5bc6\u96c6\u578b\u4efb\u52d9\n        loop = asyncio.get_event_loop()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            result = await loop.run_in_executor(executor, cpu_work)\n        \n        return result\n    \n    async def _io_intensive_task(self, data: dict) -> dict:\n        """I/O \u5bc6\u96c6\u578b\u4efb\u52d9"""\n        # \u6a21\u64ec\u7570\u6b65 I/O \u64cd\u4f5c\n        await asyncio.sleep(0.1)\n        return {"io_result": "completed", "input": data}\n    \n    def get_performance_stats(self) -> dict:\n        """\u7372\u53d6\u6548\u80fd\u7d71\u8a08"""\n        return self.performance_stats.copy()\n\n# \u6548\u80fd\u6e2c\u8a66\u7bc4\u4f8b\nasync def performance_test():\n    """\u6548\u80fd\u6e2c\u8a66"""\n    \n    brick = HighPerformanceBrick(\n        max_concurrent_requests=50,\n        request_timeout=10.0\n    )\n    \n    print("\ud83d\ude80 \u958b\u59cb\u6548\u80fd\u6e2c\u8a66...")\n    \n    # \u5efa\u7acb\u6e2c\u8a66\u8acb\u6c42\n    requests = [\n        CommonRequest(data={"operation": "cpu_intensive", "id": i})\n        for i in range(20)\n    ] + [\n        CommonRequest(data={"operation": "io_intensive", "id": i})\n        for i in range(30)\n    ]\n    \n    # \u4e26\u767c\u57f7\u884c\u8acb\u6c42\n    start_time = asyncio.get_event_loop().time()\n    \n    tasks = [brick.run_unary(req) for req in requests]\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n    \n    end_time = asyncio.get_event_loop().time()\n    \n    # \u5206\u6790\u7d50\u679c\n    successful = sum(1 for r in responses if isinstance(r, CommonResponse) and r.error.code == 200)\n    failed = len(responses) - successful\n    total_time = end_time - start_time\n    \n    print(f"\ud83d\udcca \u6548\u80fd\u6e2c\u8a66\u7d50\u679c:")\n    print(f"   \u7e3d\u8acb\u6c42\u6578: {len(requests)}")\n    print(f"   \u6210\u529f: {successful}")\n    print(f"   \u5931\u6557: {failed}")\n    print(f"   \u7e3d\u6642\u9593: {total_time:.2f}s")\n    print(f"   \u5e73\u5747 QPS: {len(requests) / total_time:.2f}")\n    \n    # \u986f\u793a\u5167\u90e8\u7d71\u8a08\n    stats = brick.get_performance_stats()\n    print(f"   \u5e73\u5747\u56de\u61c9\u6642\u9593: {stats[\'average_response_time\']:.3f}s")\n    print(f"   \u6700\u5927\u4e26\u767c\u6578: {stats[\'max_concurrent\']}")\n\nasyncio.run(performance_test())\n'})}),"\n",(0,t.jsx)(e.h3,{id:"2-\u5feb\u53d6\u7b56\u7565\u512a\u5316",children:"2. \u5feb\u53d6\u7b56\u7565\u512a\u5316"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import asyncio\nimport hashlib\nimport json\nfrom datetime import datetime, timedelta\nfrom typing import Any, Dict, Optional, Tuple\nfrom dataclasses import dataclass\nfrom llmbrick.bricks.common.common import CommonBrick\nfrom llmbrick.protocols.models.bricks.common_types import CommonRequest, CommonResponse\nfrom llmbrick.core.error_codes import ErrorCodes\n\n@dataclass\nclass CacheConfig:\n    """\u5feb\u53d6\u914d\u7f6e"""\n    max_size: int = 1000\n    ttl_seconds: int = 3600\n    enable_lru: bool = True\n    enable_compression: bool = False\n    hit_rate_threshold: float = 0.7\n\nclass SmartCache:\n    """\u667a\u80fd\u5feb\u53d6\u7cfb\u7d71"""\n    \n    def __init__(self, config: CacheConfig):\n        self.config = config\n        self.cache: Dict[str, Tuple[Any, datetime, int]] = {}  # value, timestamp, access_count\n        self.access_order: List[str] = []  # LRU \u9806\u5e8f\n        self.stats = {\n            "hits": 0,\n            "misses": 0,\n            "evictions": 0,\n            "size": 0\n        }\n    \n    def _generate_key(self, data: Dict[str, Any]) -> str:\n        """\u751f\u6210\u5feb\u53d6\u9375\u503c"""\n        serialized = json.dumps(data, sort_keys=True)\n        return hashlib.md5(serialized.encode()).hexdigest()\n    \n    def _is_expired(self, timestamp: datetime) -> bool:\n        """\u6aa2\u67e5\u662f\u5426\u904e\u671f"""\n        return datetime.now() - timestamp > timedelta(seconds=self.config.ttl_seconds)\n    \n    def _evict_lru(self):\n        """LRU \u6dd8\u6c70"""\n        if not self.access_order:\n            return\n        \n        oldest_key = self.access_order.pop(0)\n        if oldest_key in self.cache:\n            del self.cache[oldest_key]\n            self.stats["evictions"] += 1\n    \n    def _update_access_order(self, key: str):\n        """\u66f4\u65b0\u8a2a\u554f\u9806\u5e8f"""\n        if self.config.enable_lru:\n            if key in self.access_order:\n                self.access_order.remove(key)\n            self.access_order.append(key)\n    \n    def get(self, data: Dict[str, Any]) -> Optional[Any]:\n        """\u7372\u53d6\u5feb\u53d6"""\n        key = self._generate_key(data)\n        \n        if key not in self.cache:\n            self.stats["misses"] += 1\n            return None\n        \n        value, timestamp, access_count = self.cache[key]\n        \n        # \u6aa2\u67e5\u904e\u671f\n        if self._is_expired(timestamp):\n            del self.cache[key]\n            if key in self.access_order:\n                self.access_order.remove(key)\n            self.stats["misses"] += 1\n            return None\n        \n        # \u66f4\u65b0\u8a2a\u554f\u8a18\u9304\n        self.cache[key] = (value, timestamp, access_count + 1)\n        self._update_access_order(key)\n        self.stats["hits"] += 1\n        \n        return value\n    \n    def set(self, data: Dict[str, Any], value: Any):\n        """\u8a2d\u5b9a\u5feb\u53d6"""\n        key = self._generate_key(data)\n        \n        # \u6aa2\u67e5\u5bb9\u91cf\u9650\u5236\n        if len(self.cache) >= self.config.max_size and key not in self.cache:\n            self._evict_lru()\n        \n        # \u8a2d\u5b9a\u5feb\u53d6\n        self.cache[key] = (value, datetime.now(), 0)\n        self._update_access_order(key)\n        self.stats["size"] = len(self.cache)\n    \n    def get_hit_rate(self) -> float:\n        """\u7372\u53d6\u547d\u4e2d\u7387"""\n        total = self.stats["hits"] + self.stats["misses"]\n        return self.stats["hits"] / total if total > 0 else 0.0\n    \n    def clear_expired(self):\n        """\u6e05\u7406\u904e\u671f\u9805\u76ee"""\n        expired_keys = []\n        for key, (_, timestamp, _) in self.cache.items():\n            if self._is_expired(timestamp):\n                expired_keys.append(key)\n        \n        for key in expired_keys:\n            del self.cache[key]\n            if key in self.access_order:\n                self.access_order.remove(key)\n        \n        self.stats["size"] = len(self.cache)\n        return len(expired_keys)\n\nclass CacheOptimizedBrick(CommonBrick):\n    """\u5feb\u53d6\u512a\u5316\u7684 Brick"""\n    \n    def __init__(self, cache_config: CacheConfig = None, **kwargs):\n        super().__init__(**kwargs)\n        \n        self.cache_config = cache_config or CacheConfig()\n        self.cache = SmartCache(self.cache_config)\n        \n        # \u555f\u52d5\u5feb\u53d6\u7dad\u8b77\u4efb\u52d9\n        asyncio.create_task(self._cache_maintenance())\n    \n    async def _cache_maintenance(self):\n        """\u5feb\u53d6\u7dad\u8b77\u4efb\u52d9"""\n        while True:\n            try:\n                await asyncio.sleep(300)  # \u6bcf5\u5206\u9418\u57f7\u884c\u4e00\u6b21\n                \n                # \u6e05\u7406\u904e\u671f\u9805\u76ee\n                expired_count = self.cache.clear_expired()\n                \n                # \u6aa2\u67e5\u547d\u4e2d\u7387\n                hit_rate = self.cache.get_hit_rate()\n                \n                print(f"\ud83e\uddf9 \u5feb\u53d6\u7dad\u8b77: \u6e05\u7406 {expired_count} \u500b\u904e\u671f\u9805\u76ee, "\n                      f"\u547d\u4e2d\u7387: {hit_rate:.2%}, "\n                      f"\u5927\u5c0f: {self.cache.stats[\'size\']}")\n                \n                # \u5982\u679c\u547d\u4e2d\u7387\u904e\u4f4e\uff0c\u8abf\u6574\u7b56\u7565\n                if hit_rate < self.cache_config.hit_rate_threshold:\n                    print(f"\u26a0\ufe0f  \u5feb\u53d6\u547d\u4e2d\u7387\u904e\u4f4e ({hit_rate:.2%}), \u8003\u616e\u8abf\u6574\u5feb\u53d6\u7b56\u7565")\n                \n            except Exception as e:\n                print(f"\u5feb\u53d6\u7dad\u8b77\u932f\u8aa4: {e}")\n    \n    @unary_handler\n    async def cached_handler(self, request: CommonRequest) -> CommonResponse:\n        """\u5e36\u5feb\u53d6\u7684\u8655\u7406\u5668"""\n        \n        # \u5617\u8a66\u5f9e\u5feb\u53d6\u7372\u53d6\n        cached_result = self.cache.get(request.data)\n        if cached_result:\n            return CommonResponse(\n                data={**cached_result, "from_cache": True},\n                error=ErrorCodes.success()\n            )\n        \n        # \u57f7\u884c\u5be6\u969b\u8655\u7406\n        try:\n            result = await self._process_data(request.data)\n            \n            # \u5b58\u5165\u5feb\u53d6\n            self.cache.set(request.data, result)\n            \n            return CommonResponse(\n                data={**result, "from_cache": False},\n                error=ErrorCodes.success()\n            )\n            \n        except Exception as e:\n            return CommonResponse(\n                error=ErrorCodes.internal_error("\u8655\u7406\u5931\u6557", str(e))\n            )\n    \n    async def _process_data(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        """\u5be6\u969b\u8cc7\u6599\u8655\u7406\u908f\u8f2f"""\n        # \u6a21\u64ec\u8907\u96dc\u8655\u7406\n        await asyncio.sleep(0.5)\n        \n        operation = data.get("operation", "default")\n        \n        if operation == "calculate":\n            numbers = data.get("numbers", [])\n            result = {\n                "sum": sum(numbers),\n                "average": sum(numbers) / len(numbers) if numbers else 0,\n                "count": len(numbers)\n            }\n        elif operation == "transform":\n            text = data.get("text", "")\n            result = {\n                "original": text,\n                "uppercase": text.upper(),\n                "length": len(text),\n                "words": len(text.split())\n            }\n        else:\n            result = {"processed": True, "operation": operation}\n        \n        return result\n    \n    def get_cache_stats(self) -> Dict[str, Any]:\n        """\u7372\u53d6\u5feb\u53d6\u7d71\u8a08"""\n        stats = self.cache.stats.copy()\n        stats["hit_rate"] = self.cache.get_hit_rate()\n        stats["config"] = {\n            "max_size": self.cache_config.max_size,\n            "ttl_seconds": self.cache_config.ttl_seconds,\n            "enable_lru": self.cache_config.enable_lru\n        }\n        return stats\n\n# \u5feb\u53d6\u6548\u80fd\u6e2c\u8a66\nasync def cache_performance_test():\n    """\u5feb\u53d6\u6548\u80fd\u6e2c\u8a66"""\n    \n    config = CacheConfig(\n        max_size=100,\n        ttl_seconds=60,\n        enable_lru=True\n    )\n    \n    brick = CacheOptimizedBrick(cache_config=config)\n    \n    print("\ud83e\uddea \u5feb\u53d6\u6548\u80fd\u6e2c\u8a66\u958b\u59cb...")\n    \n    # \u6e2c\u8a66\u8cc7\u6599\n    test_requests = [\n        CommonRequest(data={"operation": "calculate", "numbers": [1, 2, 3, 4, 5]}),\n        CommonRequest(data={"operation": "transform", "text": "Hello World"}),\n        CommonRequest(data={"operation": "calculate", "numbers": [10, 20, 30]}),\n        # \u91cd\u8907\u8acb\u6c42\u6e2c\u8a66\u5feb\u53d6\u547d\u4e2d\n        CommonRequest(data={"operation": "calculate", "numbers": [1, 2, 3, 4, 5]}),\n        CommonRequest(data={"operation": "transform", "text": "Hello World"}),\n    ]\n    \n    # \u57f7\u884c\u6e2c\u8a66\n    for i, request in enumerate(test_requests):\n        start_time = asyncio.get_event_loop().time()\n        response = await brick.run_unary(request)\n        end_time = asyncio.get_event_loop().time()\n        \n        if response.error.code == 200:\n            from_cache = response.data.get("from_cache", False)\n            print(f"\u8acb\u6c42 {i+1}: {\'\u5feb\u53d6\u547d\u4e2d\' if from_cache else \'\u5be6\u969b\u8655\u7406\'} "\n                  f"({end_time - start_time:.3f}s)")\n    \n    # \u986f\u793a\u5feb\u53d6\u7d71\u8a08\n    stats = brick.get_cache_stats()\n    print(f"\\n\ud83d\udcca \u5feb\u53d6\u7d71\u8a08:")\n    print(f"   \u547d\u4e2d\u7387: {stats[\'hit_rate\']:.2%}")\n    print(f"   \u547d\u4e2d\u6b21\u6578: {stats[\'hits\']}")\n    print(f"   \u672a\u547d\u4e2d\u6b21\u6578: {stats[\'misses\']}")\n    print(f"   \u5feb\u53d6\u5927\u5c0f: {stats[\'size\']}")\n\nasyncio.run(cache_performance_test())\n'})}),"\n",(0,t.jsx)(e.h3,{id:"3-\u6279\u6b21\u8655\u7406\u512a\u5316",children:"3. \u6279\u6b21\u8655\u7406\u512a\u5316"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom typing import List, AsyncIterator, Callable, Any\nfrom dataclasses import dataclass\nfrom llmbrick.bricks.common.common import CommonBrick\nfrom llmbrick.protocols.models.bricks.common_types import CommonRequest, CommonResponse\nfrom llmbrick.core.error_codes import ErrorCodes\n\n@dataclass\nclass BatchConfig:\n    """\u6279\u6b21\u8655\u7406\u914d\u7f6e"""\n    batch_size: int = 10\n    max_wait_time: float = 1.0\n    max_queue_size: int = 1000\n    enable_adaptive_batching: bool = True\n\nclass BatchProcessor:\n    """\u6279\u6b21\u8655\u7406\u5668"""\n    \n    def __init__(self, \n                 config: BatchConfig,\n                 process_func: Callable[[List[Any]], List[Any]]):\n        self.config = config\n        self.process_func = process_func\n        self.queue: List[Tuple[Any, asyncio.Future]] = []\n        self.processing = False\n        \n        # \u555f\u52d5\u6279\u6b21\u8655\u7406\u4efb\u52d9\n        asyncio.create_task(self._batch_processing_loop())\n    \n    async def add_to_batch(self, item: Any) -> Any:\n        """\u6dfb\u52a0\u9805\u76ee\u5230\u6279\u6b21"""\n        if len(self.queue) >= self.config.max_queue_size:\n            raise Exception(f"\u6279\u6b21\u4f47\u5217\u5df2\u6eff: {self.config.max_queue_size}")\n        \n        future = asyncio.Future()\n        self.queue.append((item, future))\n        \n        # \u5982\u679c\u9054\u5230\u6279\u6b21\u5927\u5c0f\uff0c\u7acb\u5373\u8655\u7406\n        if len(self.queue) >= self.config.batch_size:\n            asyncio.create_task(self._process_batch())\n        \n        return await future\n    \n    async def _batch_processing_loop(self):\n        """\u6279\u6b21\u8655\u7406\u5faa\u74b0"""\n        while True:\n            try:\n                await asyncio.sleep(self.config.max_wait_time)\n                \n                if self.queue and not self.processing:\n                    await self._process_batch()\n                    \n            except Exception as e:\n                print(f"\u6279\u6b21\u8655\u7406\u5faa\u74b0\u932f\u8aa4: {e}")\n    \n    async def _process_batch(self):\n        """\u8655\u7406\u6279\u6b21"""\n        if self.processing or not self.queue:\n            return\n        \n        self.processing = True\n        \n        try:\n            # \u53d6\u51fa\u6279\u6b21\u9805\u76ee\n            batch_size = min(len(self.queue), self.config.batch_size)\n            batch_items = self.queue[:batch_size]\n            self.queue = self.queue[batch_size:]\n            \n            # \u5206\u96e2\u8cc7\u6599\u548c Future\n            items = [item for item, _ in batch_items]\n            futures = [future for _, future in batch_items]\n            \n            # \u57f7\u884c\u6279\u6b21\u8655\u7406\n            results = await self.process_func(items)\n            \n            # \u8a2d\u5b9a\u7d50\u679c\n            for future, result in zip(futures, results):\n                if not future.done():\n                    future.set_result(result)\n                    \n        except Exception as e:\n            # \u8a2d\u5b9a\u932f\u8aa4\n            for _, future in batch_items:\n                if not future.done():\n                    future.set_exception(e)\n        finally:\n            self.processing = False\n\nclass BatchOptimizedBrick(CommonBrick):\n    """\u6279\u6b21\u512a\u5316\u7684 Brick"""\n    \n    def __init__(self, batch_config: BatchConfig = None, **kwargs):\n        super().__init__(**kwargs)\n        \n        self.batch_config = batch_config or BatchConfig()\n        \n        # \u5efa\u7acb\u4e0d\u540c\u985e\u578b\u7684\u6279\u6b21\u8655\u7406\u5668\n        self.text_processor = BatchProcessor(\n            self.batch_config,\n            self._batch_process_text\n        )\n        \n        self.number_processor = BatchProcessor(\n            self.batch_config,\n            self._batch_process_numbers\n        )\n    \n    @unary_handler\n    async def batch_optimized_handler(self, request: CommonRequest) -> CommonResponse:\n        """\u6279\u6b21\u512a\u5316\u7684\u8655\u7406\u5668"""\n        \n        try:\n            data_type = request.data.get("type", "text")\n            data = request.data.get("data")\n            \n            if data_type == "text":\n                result = await self.text_processor.add_to_batch(data)\n            elif data_type == "number":\n                result = await self.number_processor.add_to_batch(data)\n            else:\n                return CommonResponse(\n                    error=ErrorCodes.parameter_invalid("type", f"\u4e0d\u652f\u63f4\u7684\u8cc7\u6599\u985e\u578b: {data_type}")\n                )\n            \n            return CommonResponse(\n                data={"result": result, "processed_in_batch": True},\n                error=ErrorCodes.success()\n            )\n            \n        except Exception as e:\n            return CommonResponse(\n                error=ErrorCodes.internal_error("\u6279\u6b21\u8655\u7406\u5931\u6557", str(e))\n            )\n    \n    async def _batch_process_text(self, texts: List[str]) -> List[Dict[str, Any]]:\n        """\u6279\u6b21\u8655\u7406\u6587\u672c"""\n        print(f"\ud83d\udce6 \u6279\u6b21\u8655\u7406 {len(texts)} \u500b\u6587\u672c")\n        \n        # \u6a21\u64ec\u6279\u6b21\u8655\u7406\uff08\u6bd4\u55ae\u500b\u8655\u7406\u66f4\u9ad8\u6548\uff09\n        await asyncio.sleep(0.1)  # \u6279\u6b21\u8655\u7406\u6642\u9593\n        \n        results = []\n        for text in texts:\n            results.append({\n                "original": text,\n                "length": len(text),\n                "uppercase": text.upper(),\n                "word_count": len(text.split())\n            })\n        \n        return results\n    \n    async def _batch_process_numbers(self, numbers: List[float]) -> List[Dict[str, Any]]:\n        """\u6279\u6b21\u8655\u7406\u6578\u5b57"""\n        print(f"\ud83d\udce6 \u6279\u6b21\u8655\u7406 {len(numbers)} \u500b\u6578\u5b57")\n        \n        # \u6a21\u64ec\u6279\u6b21\u8655\u7406\n        await asyncio.sleep(0.05)\n        \n        # \u6279\u6b21\u7d71\u8a08\u8a08\u7b97\n        total = sum(numbers)\n        average = total / len(numbers) if numbers else 0\n        \n        results = []\n        for num in numbers:\n            results.append({\n                "original": num,\n                "squared": num ** 2,\n                "percentage_of_total": (num / total * 100) if total != 0 else 0,\n                "deviation_from_avg": num - average\n            })\n        \n        return results\n\n# \u6279\u6b21\u8655\u7406\u6e2c\u8a66\nasync def batch_processing_test():\n    """\u6279\u6b21\u8655\u7406\u6e2c\u8a66"""\n    \n    config = BatchConfig(\n        batch_size=5,\n        max_wait_time=0.5,\n        max_queue_size=100\n    )\n    \n    brick = BatchOptimizedBrick(batch_config=config)\n    \n    print("\ud83d\ude80 \u6279\u6b21\u8655\u7406\u6e2c\u8a66\u958b\u59cb...")\n    \n    # \u5efa\u7acb\u6e2c\u8a66\u8acb\u6c42\n    text_requests = [\n        CommonRequest(data={"type": "text", "data": f"\u6e2c\u8a66\u6587\u672c {i}"})\n        for i in range(12)\n    ]\n    \n    number_requests = [\n        CommonRequest(data={"type": "number", "data": float(i * 10)})\n        for i in range(8)\n    ]\n    \n    # \u6df7\u5408\u8acb\u6c42\u6e2c\u8a66\n    all_requests = text_requests + number_requests\n    \n    # \u4e26\u767c\u767c\u9001\u8acb\u6c42\n    start_time = asyncio.get_event_loop().time()\n    \n    tasks = [brick.run_unary(req) for req in all_requests]\n    responses = await asyncio.gather(*tasks)\n    \n    end_time = asyncio.get_event_loop().time()\n    \n    # \u5206\u6790\u7d50\u679c\n    successful = sum(1 for r in responses if r.error.code == 200)\n    \n    print(f"\ud83d\udcca \u6279\u6b21\u8655\u7406\u7d50\u679c:")\n    print(f"   \u7e3d\u8acb\u6c42\u6578: {len(all_requests)}")\n    print(f"   \u6210\u529f\u8655\u7406: {successful}")\n    print(f"   \u7e3d\u6642\u9593: {end_time - start_time:.2f}s")\n    print(f"   \u5e73\u5747\u6bcf\u8acb\u6c42: {(end_time - start_time) / len(all_requests):.3f}s")\n\nasyncio.run(batch_processing_test())\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"faq--\u9032\u968e\u554f\u7b54",children:"FAQ / \u9032\u968e\u554f\u7b54"}),"\n",(0,t.jsx)(e.h3,{id:"q1-commonbrick-\u8207\u5176\u4ed6-brick-\u985e\u578b\u7684\u95dc\u4fc2\u662f\u4ec0\u9ebc",children:"Q1: CommonBrick \u8207\u5176\u4ed6 Brick \u985e\u578b\u7684\u95dc\u4fc2\u662f\u4ec0\u9ebc\uff1f"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"A"}),": CommonBrick \u662f\u6574\u500b LLMBrick \u6846\u67b6\u7684\u57fa\u790e\u985e\u5225\uff0c\u5176\u4ed6\u6240\u6709\u5c08\u7528 Brick \u90fd\u7e7c\u627f\u81ea CommonBrick\uff1a"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \u7e7c\u627f\u95dc\u4fc2\u793a\u4f8b\nfrom llmbrick.bricks.common.common import CommonBrick\n\nclass LLMBrick(CommonBrick):\n    """\u8a9e\u8a00\u6a21\u578b Brick\uff0c\u7e7c\u627f CommonBrick \u7684\u6240\u6709\u529f\u80fd"""\n    pass\n\nclass GuardBrick(CommonBrick):\n    """\u5b89\u5168\u9632\u8b77 Brick\uff0c\u7e7c\u627f CommonBrick \u7684\u6240\u6709\u529f\u80fd"""\n    pass\n\n# \u9019\u610f\u5473\u8457\u6240\u6709 Brick \u90fd\u5177\u5099\uff1a\n# 1. \u76f8\u540c\u7684\u901a\u8a0a\u5354\u5b9a\uff08gRPC\uff09\n# 2. \u7d71\u4e00\u7684\u932f\u8aa4\u8655\u7406\u6a5f\u5236\n# 3. \u6a19\u6e96\u7684\u8cc7\u6599\u6a21\u578b\uff08CommonRequest/CommonResponse\uff09\n# 4. \u4e94\u7a2e\u901a\u8a0a\u6a21\u5f0f\u652f\u63f4\n'})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u512a\u52e2"}),"\uff1a"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u7d71\u4e00\u4ecb\u9762"}),"\uff1a\u6240\u6709 Brick \u90fd\u53ef\u4ee5\u4e92\u63db\u4f7f\u7528"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u7d44\u5408\u80fd\u529b"}),"\uff1a\u53ef\u4ee5\u8f15\u9b06\u7d44\u5408\u4e0d\u540c\u985e\u578b\u7684 Brick"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"\u64f4\u5c55\u6027"}),"\uff1a\u65b0\u7684 Brick \u985e\u578b\u53ef\u4ee5\u5feb\u901f\u958b\u767c"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"\u53c3\u8003\u8cc7\u6e90\u8207\u5ef6\u4f38\u95b1\u8b80",children:"\u53c3\u8003\u8cc7\u6e90\u8207\u5ef6\u4f38\u95b1\u8b80"}),"\n",(0,t.jsx)(e.h3,{id:"\u5b98\u65b9\u6587\u4ef6",children:"\u5b98\u65b9\u6587\u4ef6"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/llmbrick/docs/intro",children:"LLMBrick \u6846\u67b6\u4ecb\u7d39"})," - \u6846\u67b6\u6574\u9ad4\u6982\u8ff0"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/llmbrick/docs/documents/servers/grpc_server_guide",children:"gRPC Server \u4f7f\u7528\u6307\u5357"})," - gRPC \u670d\u52d9\u5668\u8a73\u7d30\u914d\u7f6e"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/blob/main/llmbrick/core/brick.py",children:"BaseBrick API \u6587\u4ef6"})," - \u57fa\u790e\u985e\u5225\u53c3\u8003"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\u5916\u90e8\u8cc7\u6e90",children:"\u5916\u90e8\u8cc7\u6e90"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://developers.google.com/protocol-buffers",children:"Protocol Buffer \u5b98\u65b9\u6587\u4ef6"})," - Protocol Buffer \u8a9e\u6cd5\u548c\u6700\u4f73\u5be6\u8e10"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://grpc.io/docs/languages/python/",children:"gRPC Python \u5b98\u65b9\u6587\u4ef6"})," - gRPC Python \u5be6\u4f5c\u6307\u5357"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://docs.python.org/3/library/asyncio.html",children:"asyncio \u5b98\u65b9\u6587\u4ef6"})," - Python \u7570\u6b65\u7a0b\u5f0f\u8a2d\u8a08"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"\u793e\u7fa4\u8cc7\u6e90",children:"\u793e\u7fa4\u8cc7\u6e90"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/tree/main/examples/common_brick_define",children:"GitHub \u7bc4\u4f8b\u7a0b\u5f0f\u78bc"})," - \u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/issues",children:"\u554f\u984c\u56de\u5831"})," - \u56de\u5831 Bug \u6216\u529f\u80fd\u8acb\u6c42"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.p,{children:"CommonBrick \u4e0d\u50c5\u662f\u4e00\u500b\u6280\u8853\u7d44\u4ef6\uff0c\u66f4\u662f\u69cb\u5efa\u53ef\u64f4\u5c55\u3001\u53ef\u7dad\u8b77 AI \u61c9\u7528\u7684\u57fa\u77f3\u3002\u638c\u63e1\u5176\u4f7f\u7528\u65b9\u6cd5\u5c0d\u65bc\u958b\u767c\u9ad8\u54c1\u8cea\u7684 LLM \u61c9\u7528\u81f3\u95dc\u91cd\u8981\u3002"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:"\u672c\u6307\u5357\u6301\u7e8c\u66f4\u65b0\u4e2d\uff0c\u5982\u6709\u554f\u984c\u6216\u5efa\u8b70\uff0c\u6b61\u8fce\u53c3\u8207\u793e\u7fa4\u8a0e\u8ad6\uff01"})})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>c});var r=s(6540);const t={},o=r.createContext(t);function i(n){const e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);