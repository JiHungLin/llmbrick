"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[395],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},9850:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>_,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"quickstart/translate_brick_define","title":"translate_brick_define","description":"GitHub \u7bc4\u4f8b\u7a0b\u5f0f\u78bc","source":"@site/docs/quickstart/translate_brick_define.md","sourceDirName":"quickstart","slug":"/quickstart/translate_brick_define","permalink":"/llmbrick/docs/quickstart/translate_brick_define","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"sidebar_label":"\u7ffb\u8b6f TranslateBrick \u5b9a\u7fa9"},"sidebar":"quickstartSidebar","previous":{"title":"\u7d44\u5408\u8f49\u63db ComposeBrick \u5b9a\u7fa9","permalink":"/llmbrick/docs/quickstart/compose_brick_define"},"next":{"title":"OpenAI \u804a\u5929\u6a5f\u5668\u4eba","permalink":"/llmbrick/docs/quickstart/simple_openai_chatbot"}}');var s=r(4848),i=r(8453);const a={sidebar_position:8,sidebar_label:"\u7ffb\u8b6f TranslateBrick \u5b9a\u7fa9"},l="\u5b9a\u7fa9\u8207\u4f7f\u7528 TranslateBrick",o={},c=[{value:"\u4ec0\u9ebc\u662f TranslateBrick\uff1f",id:"\u4ec0\u9ebc\u662f-translatebrick",level:2},{value:"1. \u5be6\u4f5c\u81ea\u8a02 TranslateBrick",id:"1-\u5be6\u4f5c\u81ea\u8a02-translatebrick",level:2},{value:"2. \u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b",id:"2-\u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b",level:2},{value:"\u5e38\u898b\u932f\u8aa4\u8655\u7406",id:"\u5e38\u898b\u932f\u8aa4\u8655\u7406",level:3},{value:"3. \u4ee5 gRPC \u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9",id:"3-\u4ee5-grpc-\u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9",level:2},{value:"\u555f\u52d5 gRPC \u4f3a\u670d\u5668",id:"\u555f\u52d5-grpc-\u4f3a\u670d\u5668",level:3},{value:"4. \u4ee5 gRPC Client \u547c\u53eb\u9060\u7aef TranslateBrick",id:"4-\u4ee5-grpc-client-\u547c\u53eb\u9060\u7aef-translatebrick",level:2},{value:"5. \u65b9\u6cd5\u578b\u614b\u7e3d\u89bd",id:"5-\u65b9\u6cd5\u578b\u614b\u7e3d\u89bd",level:2},{value:"6. \u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10",id:"6-\u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10",level:2},{value:"7. \u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc",id:"7-\u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc",level:2},{value:"8. \u5e38\u898b\u554f\u984c",id:"8-\u5e38\u898b\u554f\u984c",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/JiHungLin/llmbrick/tree/main/examples/translate_brick_define",children:"GitHub \u7bc4\u4f8b\u7a0b\u5f0f\u78bc"})}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\u5b9a\u7fa9\u8207\u4f7f\u7528-translatebrick",children:"\u5b9a\u7fa9\u8207\u4f7f\u7528 TranslateBrick"})}),"\n",(0,s.jsx)(n.p,{children:"\u672c\u6559\u5b78\u5c07\u8aaa\u660e\u5982\u4f55\u5728 LLMBrick \u6846\u67b6\u4e2d\u81ea\u8a02\u3001\u5be6\u4f5c\u4e26\u4f7f\u7528 TranslateBrick\uff0c\u4e26\u63d0\u4f9b\u672c\u5730\u7aef\u8207 gRPC \u670d\u52d9\u5169\u7a2e\u60c5\u5883\u7684\u5b8c\u6574\u7bc4\u4f8b\u3002\u5167\u5bb9\u6db5\u84cb\u5e38\u898b\u65b9\u6cd5\u578b\u614b\uff08Unary\u3001Output Streaming\u3001Service Info\uff09\u4e4b\u5be6\u4f5c\u8207\u547c\u53eb\u65b9\u5f0f\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u4ec0\u9ebc\u662f-translatebrick",children:"\u4ec0\u9ebc\u662f TranslateBrick\uff1f"}),"\n",(0,s.jsx)(n.p,{children:"TranslateBrick \u662f LLMBrick \u6846\u67b6\u4e2d\u5c08\u70ba\u300c\u7ffb\u8b6f\u300d\u4efb\u52d9\u8a2d\u8a08\u7684 Brick \u985e\u578b\uff0c\u9069\u5408\u7528\u4f86\u5be6\u4f5c\u5404\u7a2e\u81ea\u8a02\u7684\u7ffb\u8b6f\u6a21\u578b\u6216\u670d\u52d9\u3002\u5b83\u9810\u8a2d\u652f\u63f4\u591a\u7a2e RPC \u65b9\u6cd5\u578b\u614b\uff0c\u4e26\u53ef\u8f15\u9b06\u4e32\u63a5\u81f3\u672c\u5730\u6216\u9060\u7aef\u670d\u52d9\u3002"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-\u5be6\u4f5c\u81ea\u8a02-translatebrick",children:"1. \u5be6\u4f5c\u81ea\u8a02 TranslateBrick"}),"\n",(0,s.jsxs)(n.p,{children:["\u9996\u5148\uff0c\u5efa\u7acb\u4e00\u500b\u7e7c\u627f\u81ea ",(0,s.jsx)(n.code,{children:"TranslateBrick"})," \u7684\u81ea\u8a02\u985e\u5225\uff0c\u4e26\u5be6\u4f5c\u5404\u7a2e\u65b9\u6cd5\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# examples/translate_brick_define/my_brick.py\nfrom typing import AsyncIterator\nfrom llmbrick.bricks.translate.base_translate import TranslateBrick\nfrom llmbrick.protocols.models.bricks.translate_types import (\n    TranslateRequest,\n    TranslateResponse,\n)\nfrom llmbrick.protocols.models.bricks.common_types import (\n    ErrorDetail,\n    ServiceInfoResponse,\n    ModelInfo,\n)\nfrom llmbrick.core.error_codes import ErrorCodes\nfrom llmbrick.core.brick import (\n    unary_handler,\n    output_streaming_handler,\n    get_service_info_handler,\n)\n\nclass MyTranslateBrick(TranslateBrick):\n    """\n    MyTranslateBrick \u662f\u4e00\u500b\u81ea\u8a02\u7684 TranslateBrick \u5be6\u4f5c\u7bc4\u4f8b\u3002\n    \u652f\u63f4 unary\u3001output streaming \u8207 service info \u65b9\u6cd5\u3002\n    """\n\n    def __init__(\n        self,\n        model_name: str = "my_translate_model",\n        default_target_language: str = "zh",\n        verbose: bool = False,\n        **kwargs\n    ):\n        super().__init__(**kwargs)\n        self.model_name = model_name\n        self.default_target_language = default_target_language\n        self.verbose = verbose\n\n    @unary_handler\n    async def unary_translate(self, request: TranslateRequest) -> TranslateResponse:\n        # \u55ae\u6b21\u8acb\u6c42/\u56de\u61c9\n        text = request.text or ""\n        target_lang = request.target_language or self.default_target_language\n        if not text:\n            return TranslateResponse(\n                text="",\n                tokens=[],\n                language_code=target_lang,\n                is_final=True,\n                error=ErrorDetail(\n                    code=ErrorCodes.PARAMETER_INVALID,\n                    message="Input text is required.",\n                ),\n            )\n        # Echo translation (for demo)\n        return TranslateResponse(\n            text=f"{text} (to {target_lang})",\n            tokens=[1, 2, 3],\n            language_code=target_lang,\n            is_final=True,\n            error=ErrorDetail(\n                code=ErrorCodes.SUCCESS,\n                message="Success",\n            ),\n        )\n\n    @output_streaming_handler\n    async def stream_translate(self, request: TranslateRequest) -> AsyncIterator[TranslateResponse]:\n        # \u8f38\u51fa\u4e32\u6d41\uff0c\u6bcf\u500b\u55ae\u5b57\u5206\u6bb5\u56de\u50b3\n        text = request.text or ""\n        target_lang = request.target_language or self.default_target_language\n        if not text:\n            yield TranslateResponse(\n                text="",\n                tokens=[],\n                language_code=target_lang,\n                is_final=True,\n                error=ErrorDetail(\n                    code=ErrorCodes.PARAMETER_INVALID,\n                    message="Input text is required.",\n                ),\n            )\n            return\n\n        words = text.split()\n        for i, word in enumerate(words):\n            yield TranslateResponse(\n                text=f"{word} (t{i})",\n                tokens=[i],\n                language_code=target_lang,\n                is_final=(i == len(words) - 1),\n                error=ErrorDetail(\n                    code=ErrorCodes.SUCCESS,\n                    message="Success",\n                ),\n            )\n\n    @get_service_info_handler\n    async def service_info(self) -> ServiceInfoResponse:\n        # \u56de\u50b3\u670d\u52d9\u8cc7\u8a0a\n        model_info = ModelInfo(\n            model_id=self.model_name,\n            version="1.0",\n            supported_languages=["en", "zh"],\n            support_streaming=True,\n            description="A demo translation model that echoes input text.",\n        )\n        return ServiceInfoResponse(\n            service_name="MyTranslateBrickService",\n            version="1.0",\n            models=[model_info],\n            error=ErrorDetail(\n                code=ErrorCodes.SUCCESS,\n                message="Success",\n            ),\n        )\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-\u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b",children:"2. \u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b"}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u76f4\u63a5\u65bc Python \u7a0b\u5f0f\u4e2d\u5be6\u4f8b\u5316\u4e26\u547c\u53eb TranslateBrick\uff0c\u9069\u5408\u55ae\u5143\u6e2c\u8a66\u6216\u5d4c\u5165\u5f0f\u61c9\u7528\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# examples/translate_brick_define/local_use.py\nfrom llmbrick.protocols.models.bricks.translate_types import TranslateRequest\nfrom my_brick import MyTranslateBrick\nimport asyncio\n\nasync def main():\n    brick = MyTranslateBrick(model_name="demo_model", default_target_language="zh", verbose=True)\n\n    print("=== Get Service Info ===")\n    try:\n        service_info = await brick.run_get_service_info()\n        print(service_info)\n    except Exception as e:\n        print(f"Error in get_service_info: {e}")\n\n    print("\\n\\n=== Unary Method ===")\n    try:\n        print("Normal case:")\n        request = TranslateRequest(\n            text="Hello, world!",\n            model_id="demo_model",\n            target_language="zh",\n            client_id="test",\n            session_id="s1",\n            request_id="r1",\n            source_language="en",\n        )\n        response = await brick.run_unary(request)\n        print(response)\n\n        print("\\nError case:")\n        request = TranslateRequest(\n            text="",\n            model_id="demo_model",\n            target_language="zh",\n            client_id="test",\n            session_id="s1",\n            request_id="r2",\n            source_language="en",\n        )\n        response = await brick.run_unary(request)\n        print(response)\n    except Exception as e:\n        print(f"Error in unary call: {e}")\n\n    print("\\n\\n=== Output Streaming Method ===")\n    try:\n        print("Normal case:")\n        request = TranslateRequest(\n            text="This is a streaming test",\n            model_id="demo_model",\n            target_language="zh",\n            client_id="test",\n            session_id="s1",\n            request_id="r3",\n            source_language="en",\n        )\n        async for resp in brick.run_output_streaming(request):\n            await asyncio.sleep(0.3)\n            print(resp)\n\n        print("\\nError case:")\n        request = TranslateRequest(\n            text="",\n            model_id="demo_model",\n            target_language="zh",\n            client_id="test",\n            session_id="s1",\n            request_id="r4",\n            source_language="en",\n        )\n        async for resp in brick.run_output_streaming(request):\n            await asyncio.sleep(0.3)\n            print(resp)\n    except Exception as e:\n        print(f"Error in output streaming: {e}")\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,s.jsx)(n.h3,{id:"\u5e38\u898b\u932f\u8aa4\u8655\u7406",children:"\u5e38\u898b\u932f\u8aa4\u8655\u7406"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u8f38\u5165\u8cc7\u6599\u4e0d\u6b63\u78ba\u6642\uff0c\u6703\u56de\u50b3\u5e36\u6709 ",(0,s.jsx)(n.code,{children:"error"})," \u6b04\u4f4d\u7684 ",(0,s.jsx)(n.code,{children:"TranslateResponse"}),"\uff0c\u53ef\u64da\u6b64\u9032\u884c\u4f8b\u5916\u8655\u7406\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-\u4ee5-grpc-\u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9",children:"3. \u4ee5 gRPC \u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9"}),"\n",(0,s.jsx)(n.h3,{id:"\u555f\u52d5-grpc-\u4f3a\u670d\u5668",children:"\u555f\u52d5 gRPC \u4f3a\u670d\u5668"}),"\n",(0,s.jsx)(n.p,{children:"\u5c07\u81ea\u8a02 TranslateBrick \u8a3b\u518a\u5230 gRPC \u4f3a\u670d\u5668\uff0c\u5c0d\u5916\u63d0\u4f9b\u9060\u7aef\u547c\u53eb\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# examples/translate_brick_define/grpc_server.py\nfrom my_brick import MyTranslateBrick\nfrom llmbrick.servers.grpc.server import GrpcServer\n\ngrpc_server = GrpcServer(port=50071)\nmy_brick = MyTranslateBrick(\n    model_name="demo_model",\n    default_target_language="zh",\n    verbose=True,\n)\ngrpc_server.register_service(my_brick)\n\nif __name__ == "__main__":\n    import asyncio\n    asyncio.run(grpc_server.start())\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"4-\u4ee5-grpc-client-\u547c\u53eb\u9060\u7aef-translatebrick",children:"4. \u4ee5 gRPC Client \u547c\u53eb\u9060\u7aef TranslateBrick"}),"\n",(0,s.jsxs)(n.p,{children:["\u53ef\u900f\u904e ",(0,s.jsx)(n.code,{children:"MyTranslateBrick.toGrpcClient"})," \u7522\u751f\u9060\u7aef\u4ee3\u7406\u7269\u4ef6\uff0c\u4e26\u4ee5 async \u65b9\u5f0f\u547c\u53eb\u5404\u7a2e\u65b9\u6cd5\uff1a"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# examples/translate_brick_define/grpc_client.py\nfrom my_brick import MyTranslateBrick\nfrom llmbrick.protocols.models.bricks.translate_types import TranslateRequest\n\nif __name__ == "__main__":\n    # \u5efa\u7acb gRPC client\n    my_brick = MyTranslateBrick.toGrpcClient(remote_address="127.0.0.1:50071", verbose=False)\n    import asyncio\n\n    print("=== Get Service Info ===")\n    def run_get_service_info_example():\n        async def example():\n            service_info = await my_brick.run_get_service_info()\n            print(service_info)\n        asyncio.run(example())\n\n    run_get_service_info_example()\n\n    print("\\n\\n=== Unary Method ===")\n    def run_unary_example(is_test_error=False):\n        async def example():\n            request = TranslateRequest(\n                text="Hello, gRPC!" if not is_test_error else "",\n                model_id="demo_model",\n                target_language="zh",\n                client_id="test",\n                session_id="s1",\n                request_id="r1" if not is_test_error else "r2",\n                source_language="en",\n            )\n            response = await my_brick.run_unary(request)\n            print(response)\n        asyncio.run(example())\n\n    print("Normal case:")\n    run_unary_example(is_test_error=False)\n    print("Error case:")\n    run_unary_example(is_test_error=True)\n\n    print("\\n\\n=== Output Streaming Method ===")\n    def run_output_streaming_example(is_test_error=False):\n        async def example():\n            request = TranslateRequest(\n                text="Streaming gRPC test" if not is_test_error else "",\n                model_id="demo_model",\n                target_language="zh",\n                client_id="test",\n                session_id="s1",\n                request_id="r3" if not is_test_error else "r4",\n                source_language="en",\n            )\n            async for resp in my_brick.run_output_streaming(request):\n                await asyncio.sleep(0.3)\n                print(resp)\n        asyncio.run(example())\n\n    print("Normal case:")\n    run_output_streaming_example(is_test_error=False)\n    print("Error case:")\n    run_output_streaming_example(is_test_error=True)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"5-\u65b9\u6cd5\u578b\u614b\u7e3d\u89bd",children:"5. \u65b9\u6cd5\u578b\u614b\u7e3d\u89bd"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"\u65b9\u6cd5\u578b\u614b"}),(0,s.jsx)(n.th,{children:"\u88dd\u98fe\u5668"}),(0,s.jsx)(n.th,{children:"\u8aaa\u660e"}),(0,s.jsx)(n.th,{children:"\u7bc4\u4f8b\u547c\u53eb\u65b9\u5f0f"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Unary"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"@unary_handler"})}),(0,s.jsx)(n.td,{children:"\u4e00\u6b21\u8acb\u6c42/\u56de\u61c9"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"await run_unary(request)"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Output Streaming"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"@output_streaming_handler"})}),(0,s.jsx)(n.td,{children:"\u4e00\u6b21\u8f38\u5165\uff0c\u591a\u6b21\u56de\u61c9"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"async for r in run_output_streaming(request)"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Service Info"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"@get_service_info_handler"})}),(0,s.jsx)(n.td,{children:"\u67e5\u8a62\u670d\u52d9\u8cc7\u8a0a"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"await run_get_service_info()"})})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"6-\u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10",children:"6. \u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u578b\u5225\u8a3b\u8a18"}),"\uff1a\u5efa\u8b70\u660e\u78ba\u6a19\u8a3b\u6240\u6709\u65b9\u6cd5\u7684\u8f38\u5165/\u8f38\u51fa\u578b\u5225\uff0c\u63d0\u5347\u53ef\u8b80\u6027\u8207\u7dad\u8b77\u6027\u3002"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u932f\u8aa4\u8655\u7406"}),"\uff1a\u5584\u7528 ",(0,s.jsx)(n.code,{children:"ErrorDetail"})," \u56de\u50b3\u6a19\u6e96\u5316\u932f\u8aa4\u8cc7\u8a0a\uff0c\u65b9\u4fbf\u524d\u5f8c\u7aef\u5354\u4f5c\u3002"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u975e\u540c\u6b65\u8a2d\u8a08"}),"\uff1a\u6240\u6709\u65b9\u6cd5\u7686\u5efa\u8b70\u4f7f\u7528 async/await\uff0c\u78ba\u4fdd\u9ad8\u6548\u80fd\u8207\u53ef\u64f4\u5145\u6027\u3002"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u4e32\u6d41\u8655\u7406"}),"\uff1a\u4e32\u6d41\u65b9\u6cd5\u53ef\u7528\u65bc\u5927\u91cf\u8cc7\u6599\u3001\u9577\u6642\u9593\u4efb\u52d9\u7b49\u5834\u666f\uff0c\u5584\u7528 async generator\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-\u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc",children:"7. \u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc"}),"\n",(0,s.jsxs)(n.p,{children:["\u8acb\u53c3\u8003 ",(0,s.jsx)(n.a,{href:"https://github.com/JiHungLin/llmbrick/tree/main/examples/translate_brick_define",children:(0,s.jsx)(n.code,{children:"examples/translate_brick_define/"})})," \u76ee\u9304\u4e0b\u7684\u5b8c\u6574\u7bc4\u4f8b\uff0c\u5305\u542b\u672c\u5730\u7aef\u8207 gRPC \u5169\u7a2e\u7528\u6cd5\uff0c\u4e26\u6db5\u84cb\u6240\u6709\u5e38\u898b\u65b9\u6cd5\u578b\u614b\u3002"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"8-\u5e38\u898b\u554f\u984c",children:"8. \u5e38\u898b\u554f\u984c"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Q: \u5982\u4f55\u64f4\u5145\u81ea\u8a02\u6b04\u4f4d\uff1f"}),(0,s.jsx)(n.br,{}),"\n","A: \u65bc ",(0,s.jsx)(n.code,{children:"MyTranslateBrick.__init__"})," \u6216\u5404\u65b9\u6cd5\u4e2d\u81ea\u8a02\u5c6c\u6027\u8207\u908f\u8f2f\u5373\u53ef\uff0c\u4e26\u53ef\u900f\u904e ",(0,s.jsx)(n.code,{children:"TranslateRequest"})," \u50b3\u905e\u81ea\u8a02\u6b04\u4f4d\u3002"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"\u672c\u6559\u5b78\u6db5\u84cb\u4e86 TranslateBrick \u7684\u5b8c\u6574\u5b9a\u7fa9\u3001\u5be6\u4f5c\u8207\u4f7f\u7528\u6d41\u7a0b\uff0c\u9069\u5408\u521d\u5b78\u8005\u8207\u9032\u968e\u958b\u767c\u8005\u5feb\u901f\u4e0a\u624b LLMBrick \u6846\u67b6\u7684\u81ea\u8a02\u7ffb\u8b6f\u6a21\u7d44\u958b\u767c\u3002"})]})}function _(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);