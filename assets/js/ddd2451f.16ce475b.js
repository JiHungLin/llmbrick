"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[405],{3828:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"quickstart/intention_brick_define","title":"intention_brick_define","description":"GitHub \u7bc4\u4f8b\u7a0b\u5f0f\u78bc","source":"@site/docs/quickstart/intention_brick_define.md","sourceDirName":"quickstart","slug":"/quickstart/intention_brick_define","permalink":"/llmbrick/docs/quickstart/intention_brick_define","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"\u610f\u5716\u5206\u985e IntentionBrick \u5b9a\u7fa9"},"sidebar":"quickstartSidebar","previous":{"title":"\u6587\u672c\u6821\u6b63 RectifyBrick \u5b9a\u7fa9","permalink":"/llmbrick/docs/quickstart/rectify_brick_define"},"next":{"title":"LLMBrick \u5b9a\u7fa9","permalink":"/llmbrick/docs/quickstart/llm_brick_define"}}');var i=r(4848),s=r(8453);const o={sidebar_position:4,sidebar_label:"\u610f\u5716\u5206\u985e IntentionBrick \u5b9a\u7fa9"},c="\u5b9a\u7fa9\u8207\u4f7f\u7528 IntentionBrick",l={},d=[{value:"1. \u4ec0\u9ebc\u662f IntentionBrick\uff1f",id:"1-\u4ec0\u9ebc\u662f-intentionbrick",level:2},{value:"2. \u5be6\u4f5c\u81ea\u8a02 IntentionBrick",id:"2-\u5be6\u4f5c\u81ea\u8a02-intentionbrick",level:2},{value:"3. \u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b",id:"3-\u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b",level:2},{value:"\u5e38\u898b\u932f\u8aa4\u8655\u7406",id:"\u5e38\u898b\u932f\u8aa4\u8655\u7406",level:3},{value:"4. \u4ee5 gRPC \u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9",id:"4-\u4ee5-grpc-\u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9",level:2},{value:"\u555f\u52d5 gRPC \u4f3a\u670d\u5668",id:"\u555f\u52d5-grpc-\u4f3a\u670d\u5668",level:3},{value:"5. \u4ee5 gRPC Client \u547c\u53eb\u9060\u7aef Brick",id:"5-\u4ee5-grpc-client-\u547c\u53eb\u9060\u7aef-brick",level:2},{value:"6. \u65b9\u6cd5\u578b\u614b\u7e3d\u89bd",id:"6-\u65b9\u6cd5\u578b\u614b\u7e3d\u89bd",level:2},{value:"7. \u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10",id:"7-\u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10",level:2},{value:"8. \u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc",id:"8-\u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc",level:2},{value:"9. \u5e38\u898b\u554f\u984c",id:"9-\u5e38\u898b\u554f\u984c",level:2}];function a(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/tree/main/examples/intention_brick_define",children:"GitHub \u7bc4\u4f8b\u7a0b\u5f0f\u78bc"})}),"\n",(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"\u5b9a\u7fa9\u8207\u4f7f\u7528-intentionbrick",children:"\u5b9a\u7fa9\u8207\u4f7f\u7528 IntentionBrick"})}),"\n",(0,i.jsx)(e.p,{children:"\u672c\u6559\u5b78\u5c07\u8aaa\u660e\u5982\u4f55\u5728 LLMBrick \u6846\u67b6\u4e2d\u81ea\u8a02\u3001\u5be6\u4f5c\u4e26\u4f7f\u7528\u610f\u5716\u5206\u985e\u578b IntentionBrick\u3002\u5167\u5bb9\u6db5\u84cb\u672c\u5730\u7aef\u547c\u53eb\u8207 gRPC \u670d\u52d9\u5169\u7a2e\u60c5\u5883\uff0c\u4e26\u91dd\u5c0d\u5e38\u898b\u65b9\u6cd5\u578b\u614b\uff08Unary\u3001Service Info\uff09\u63d0\u4f9b\u5b8c\u6574\u7bc4\u4f8b\u8207\u8aaa\u660e\u3002"}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"1-\u4ec0\u9ebc\u662f-intentionbrick",children:"1. \u4ec0\u9ebc\u662f IntentionBrick\uff1f"}),"\n",(0,i.jsx)(e.p,{children:"IntentionBrick \u662f LLMBrick \u6846\u67b6\u4e2d\u5c08\u70ba\u300c\u610f\u5716\u5206\u985e\u300d\u8a2d\u8a08\u7684 Brick \u985e\u578b\uff0c\u9069\u5408\u7528\u4f86\u5be6\u4f5c\u5404\u7a2e\u81ea\u7136\u8a9e\u8a00\u610f\u5716\u8fa8\u8b58\u3001\u5206\u985e\u7b49 AI/LLM \u529f\u80fd\u6a21\u7d44\u3002\u5176\u4ecb\u9762\u8a2d\u8a08\u7c21\u6f54\uff0c\u5c08\u6ce8\u65bc\u55ae\u4e00\u6587\u672c\u7684\u610f\u5716\u5224\u65b7\uff0c\u4e26\u56de\u50b3\u5206\u985e\u7d50\u679c\u8207\u4fe1\u5fc3\u5206\u6578\u3002"}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"2-\u5be6\u4f5c\u81ea\u8a02-intentionbrick",children:"2. \u5be6\u4f5c\u81ea\u8a02 IntentionBrick"}),"\n",(0,i.jsxs)(e.p,{children:["\u9996\u5148\uff0c\u5efa\u7acb\u4e00\u500b\u7e7c\u627f\u81ea ",(0,i.jsx)(e.code,{children:"IntentionBrick"})," \u7684\u81ea\u8a02\u985e\u5225\uff0c\u4e26\u5be6\u4f5c\u4e3b\u8981\u65b9\u6cd5\uff1a"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# examples/intention_brick_define/my_brick.py\nfrom llmbrick.bricks.intention.base_intention import IntentionBrick\nfrom llmbrick.core.brick import unary_handler, get_service_info_handler\nfrom llmbrick.protocols.models.bricks.intention_types import (\n    IntentionRequest, IntentionResponse, IntentionResult\n)\nfrom llmbrick.protocols.models.bricks.common_types import (\n    ErrorDetail, ServiceInfoResponse, ModelInfo\n)\nfrom llmbrick.core.error_codes import ErrorCodes\n\nclass MyIntentionBrick(IntentionBrick):\n    """\n    \u81ea\u8a02\u610f\u5716\u5206\u985e Brick\uff0c\u5be6\u4f5c\u7c21\u55ae\u7684\u610f\u5716\u5224\u65b7\u908f\u8f2f\u3002\n    """\n    def __init__(self, model_name: str = "demo_model", res_prefix: str = "my_intention", **kwargs):\n        super().__init__(**kwargs)\n        self.model_name = model_name\n        self.res_prefix = res_prefix\n        # \u5b9a\u7fa9\u610f\u5716\u95dc\u9375\u5b57\u5c0d\u61c9\u8868\n        self.intent_patterns = {\n            "\u4f60\u597d": "greet",\n            "hello": "greet",\n            "hi": "greet",\n            "\u518d\u898b": "goodbye",\n            "bye": "goodbye",\n            "\u67e5\u8a62": "query",\n            "search": "query",\n            "\u5e6b\u52a9": "help",\n            "help": "help"\n        }\n\n    @unary_handler\n    async def process(self, input_data: IntentionRequest) -> IntentionResponse:\n        """\n        \u8655\u7406\u8f38\u5165\u6587\u672c\u4e26\u8fd4\u56de\u610f\u5716\u5206\u985e\u7d50\u679c\n        """\n        if not input_data.text:\n            return IntentionResponse(\n                error=ErrorDetail(\n                    code=ErrorCodes.PARAMETER_INVALID,\n                    message="Input text is required."\n                )\n            )\n        text = input_data.text.lower()\n        found_intent = None\n        for pattern, intent in self.intent_patterns.items():\n            if pattern in text:\n                found_intent = intent\n                break\n        if found_intent:\n            result = IntentionResult(\n                intent_category=found_intent,\n                confidence=0.9\n            )\n        else:\n            result = IntentionResult(\n                intent_category="unknown",\n                confidence=0.3\n            )\n        return IntentionResponse(\n            results=[result],\n            error=ErrorDetail(code=ErrorCodes.SUCCESS, message="Success")\n        )\n\n    @get_service_info_handler\n    async def get_service_info_method(self) -> ServiceInfoResponse:\n        """\n        \u56de\u50b3\u670d\u52d9\u8cc7\u8a0a\n        """\n        model_info = ModelInfo(\n            model_id=self.model_name,\n            version="1.0",\n            supported_languages=["en", "zh"],\n            support_streaming=False,\n            description="A simple intention classification model supporting basic intents like greet, goodbye, query, and help."\n        )\n        return ServiceInfoResponse(\n            service_name=f"{self.res_prefix}Service",\n            version="1.0",\n            models=[model_info],\n            error=ErrorDetail(code=ErrorCodes.SUCCESS, message="Success")\n        )\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"3-\u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b",children:"3. \u672c\u5730\u7aef\u547c\u53eb\u7bc4\u4f8b"}),"\n",(0,i.jsx)(e.p,{children:"\u53ef\u76f4\u63a5\u65bc Python \u7a0b\u5f0f\u4e2d\u5be6\u4f8b\u5316\u4e26\u547c\u53eb IntentionBrick\uff0c\u9069\u5408\u55ae\u5143\u6e2c\u8a66\u6216\u5d4c\u5165\u5f0f\u61c9\u7528\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# examples/intention_brick_define/local_use.py\nfrom llmbrick.core.error_codes import ErrorCodes\nfrom my_brick import MyIntentionBrick\nfrom llmbrick.protocols.models.bricks.intention_types import IntentionRequest\nimport asyncio\n\nasync def main():\n    # \u521d\u59cb\u5316 IntentionBrick\n    my_brick = MyIntentionBrick(\n        model_name="demo_model",\n        res_prefix="local_test",\n        verbose=False\n    )\n\n    print("=== Get Service Info ===")\n    service_info = await my_brick.run_get_service_info()\n    print(service_info)\n\n    print("\\n\\n=== Normal Cases ===")\n    test_texts = [\n        "\u4f60\u597d\uff0c\u8acb\u554f\u4e00\u4e0b",  # \u9810\u671f: greet\n        "\u6211\u60f3\u8981\u67e5\u8a62\u8cc7\u6599",  # \u9810\u671f: query\n        "\u8b1d\u8b1d\uff0c\u518d\u898b",      # \u9810\u671f: goodbye\n        "\u6211\u9700\u8981\u5e6b\u52a9",      # \u9810\u671f: help\n        "\u96a8\u6a5f\u6587\u672c\u6e2c\u8a66"     # \u9810\u671f: unknown\n    ]\n    for text in test_texts:\n        print(f"\\nInput text: {text}")\n        request = IntentionRequest(text=text, client_id="test_client")\n        response = await my_brick.run_unary(request)\n        if response.error and response.error.code != ErrorCodes.SUCCESS:\n            print(f"Error: {response.error.message}")\n        else:\n            result = response.results[0]\n            print(f"Intent: {result.intent_category}")\n            print(f"Confidence: {result.confidence}")\n\n    print("\\n\\n=== Error Cases ===")\n    # \u6e2c\u8a66\u932f\u8aa4\u60c5\u6cc1 - \u7a7a\u6587\u672c\n    request = IntentionRequest(text="", client_id="test_client")\n    response = await my_brick.run_unary(request)\n    if response.error:\n        print(f"Error (expected): {response.error.message}")\n\n    # \u6e2c\u8a66\u932f\u8aa4\u60c5\u6cc1 - None \u6587\u672c\n    request = IntentionRequest(text=None, client_id="test_client")\n    response = await my_brick.run_unary(request)\n    if response.error:\n        print(f"Error (expected): {response.error.message}")\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u5e38\u898b\u932f\u8aa4\u8655\u7406",children:"\u5e38\u898b\u932f\u8aa4\u8655\u7406"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u82e5\u8f38\u5165\u6587\u672c\u70ba\u7a7a\u6216 None\uff0c\u6703\u56de\u50b3\u5e36\u6709 ",(0,i.jsx)(e.code,{children:"error"})," \u6b04\u4f4d\u7684 ",(0,i.jsx)(e.code,{children:"IntentionResponse"}),"\uff0c\u53ef\u64da\u6b64\u9032\u884c\u4f8b\u5916\u8655\u7406\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"4-\u4ee5-grpc-\u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9",children:"4. \u4ee5 gRPC \u65b9\u5f0f\u63d0\u4f9b\u670d\u52d9"}),"\n",(0,i.jsx)(e.h3,{id:"\u555f\u52d5-grpc-\u4f3a\u670d\u5668",children:"\u555f\u52d5 gRPC \u4f3a\u670d\u5668"}),"\n",(0,i.jsx)(e.p,{children:"\u5c07\u81ea\u8a02 IntentionBrick \u8a3b\u518a\u5230 gRPC \u4f3a\u670d\u5668\uff0c\u5c0d\u5916\u63d0\u4f9b\u9060\u7aef\u547c\u53eb\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# examples/intention_brick_define/grpc_server.py\nfrom my_brick import MyIntentionBrick\nfrom llmbrick.servers.grpc.server import GrpcServer\nimport asyncio\n\n# \u5efa\u7acb gRPC \u4f3a\u670d\u5668\u5be6\u4f8b\ngrpc_server = GrpcServer(port=50051)\n\n# \u521d\u59cb\u5316 IntentionBrick\nmy_brick = MyIntentionBrick(\n    model_name="grpc_demo_model",\n    res_prefix="grpc_test",\n    verbose=True  # \u555f\u7528\u8a73\u7d30\u65e5\u8a8c\u4ee5\u4fbf\u65bc\u9664\u932f\n)\n\n# \u8a3b\u518a\u670d\u52d9\ngrpc_server.register_service(my_brick)\n\nif __name__ == "__main__":\n    print("Starting gRPC server on port 50051...")\n    try:\n        asyncio.run(grpc_server.start())\n    except KeyboardInterrupt:\n        print("\\nServer stopped by user")\n    except Exception as e:\n        print(f"Server error: {e}")\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"5-\u4ee5-grpc-client-\u547c\u53eb\u9060\u7aef-brick",children:"5. \u4ee5 gRPC Client \u547c\u53eb\u9060\u7aef Brick"}),"\n",(0,i.jsxs)(e.p,{children:["\u53ef\u900f\u904e ",(0,i.jsx)(e.code,{children:"IntentionBrick.toGrpcClient"})," \u7522\u751f\u9060\u7aef\u4ee3\u7406\u7269\u4ef6\uff0c\u4e26\u4ee5 async \u65b9\u5f0f\u547c\u53eb\u5404\u7a2e\u65b9\u6cd5\uff1a"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# examples/intention_brick_define/grpc_client.py\nfrom llmbrick.core.error_codes import ErrorCodes\nfrom my_brick import MyIntentionBrick\nfrom llmbrick.protocols.models.bricks.intention_types import IntentionRequest\nimport asyncio\n\nasync def main():\n    # \u4f7f\u7528 toGrpcClient \u5efa\u7acb\u9060\u7aef\u5ba2\u6236\u7aef\n    my_brick = MyIntentionBrick.toGrpcClient(\n        remote_address="127.0.0.1:50051",\n        verbose=False\n    )\n\n    print("=== Get Service Info ===")\n    try:\n        service_info = await my_brick.run_get_service_info()\n        print(service_info)\n    except Exception as e:\n        print(f"Error in get_service_info: {e}")\n\n    print("\\n\\n=== Normal Cases ===")\n    test_cases = [\n        "\u4f60\u597d\uff0c\u6211\u6709\u500b\u554f\u984c",      # \u9810\u671f: greet\n        "help me please",       # \u9810\u671f: help\n        "\u6211\u8981\u67e5\u8a62\u8a02\u55ae\u8cc7\u6599",      # \u9810\u671f: query\n        "bye bye",             # \u9810\u671f: goodbye\n        "\u9019\u662f\u6e2c\u8a66\u6587\u672c"          # \u9810\u671f: unknown\n    ]\n    for text in test_cases:\n        try:\n            print(f"\\nTesting text: {text}")\n            request = IntentionRequest(text=text, client_id="grpc_client")\n            response = await my_brick.run_unary(request)\n            if response.error and response.error.code != ErrorCodes.SUCCESS:\n                print(f"Error: {response.error.message}")\n            else:\n                result = response.results[0]\n                print(f"Intent: {result.intent_category}")\n                print(f"Confidence: {result.confidence}")\n        except Exception as e:\n            print(f"Error processing request: {e}")\n\n    print("\\n\\n=== Error Cases ===")\n    # \u6e2c\u8a66\u7a7a\u6587\u672c\n    try:\n        print("\\nTesting empty text:")\n        request = IntentionRequest(text="", client_id="grpc_client")\n        response = await my_brick.run_unary(request)\n        print(f"Error (expected): {response.error.message}")\n    except Exception as e:\n        print(f"Error processing request: {e}")\n\n    # \u6e2c\u8a66 None \u6587\u672c\n    try:\n        print("\\nTesting None text:")\n        request = IntentionRequest(text=None, client_id="grpc_client")\n        response = await my_brick.run_unary(request)\n        print(f"Error (expected): {response.error.message}")\n    except Exception as e:\n        print(f"Error processing request: {e}")\n\nif __name__ == "__main__":\n    print("Connecting to gRPC server at 127.0.0.1:50051...")\n    try:\n        asyncio.run(main())\n    except KeyboardInterrupt:\n        print("\\nClient stopped by user")\n    except Exception as e:\n        print(f"Client error: {e}")\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"6-\u65b9\u6cd5\u578b\u614b\u7e3d\u89bd",children:"6. \u65b9\u6cd5\u578b\u614b\u7e3d\u89bd"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"\u65b9\u6cd5\u578b\u614b"}),(0,i.jsx)(e.th,{children:"\u88dd\u98fe\u5668"}),(0,i.jsx)(e.th,{children:"\u8aaa\u660e"}),(0,i.jsx)(e.th,{children:"\u7bc4\u4f8b\u547c\u53eb\u65b9\u5f0f"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Unary"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"@unary_handler"})}),(0,i.jsx)(e.td,{children:"\u4e00\u6b21\u8acb\u6c42/\u56de\u61c9"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"await run_unary(request)"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Service Info"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"@get_service_info_handler"})}),(0,i.jsx)(e.td,{children:"\u67e5\u8a62\u670d\u52d9\u8cc7\u8a0a"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"await run_get_service_info()"})})]})]})]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"IntentionBrick \u4e3b\u8981\u652f\u63f4 Unary \u8207 Service Info \u5169\u7a2e\u65b9\u6cd5\u578b\u614b\uff0c\u5c08\u6ce8\u65bc\u55ae\u4e00\u6587\u672c\u610f\u5716\u5206\u985e\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"7-\u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10",children:"7. \u5be6\u4f5c\u5efa\u8b70\u8207\u6700\u4f73\u5be6\u8e10"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\u578b\u5225\u8a3b\u8a18"}),"\uff1a\u5efa\u8b70\u660e\u78ba\u6a19\u8a3b\u6240\u6709\u65b9\u6cd5\u7684\u8f38\u5165/\u8f38\u51fa\u578b\u5225\uff0c\u63d0\u5347\u53ef\u8b80\u6027\u8207\u7dad\u8b77\u6027\u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\u932f\u8aa4\u8655\u7406"}),"\uff1a\u5584\u7528 ",(0,i.jsx)(e.code,{children:"ErrorDetail"})," \u56de\u50b3\u6a19\u6e96\u5316\u932f\u8aa4\u8cc7\u8a0a\uff0c\u65b9\u4fbf\u524d\u5f8c\u7aef\u5354\u4f5c\u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\u975e\u540c\u6b65\u8a2d\u8a08"}),"\uff1a\u6240\u6709\u65b9\u6cd5\u7686\u5efa\u8b70\u4f7f\u7528 async/await\uff0c\u78ba\u4fdd\u9ad8\u6548\u80fd\u8207\u53ef\u64f4\u5145\u6027\u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"\u610f\u5716\u6620\u5c04"}),"\uff1a\u53ef\u4f9d\u5be6\u969b\u9700\u6c42\u64f4\u5145 ",(0,i.jsx)(e.code,{children:"intent_patterns"}),"\uff0c\u6216\u4e32\u63a5\u66f4\u9032\u968e\u7684 NLP \u6a21\u578b\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"8-\u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc",children:"8. \u5b8c\u6574\u7bc4\u4f8b\u7a0b\u5f0f\u78bc"}),"\n",(0,i.jsxs)(e.p,{children:["\u8acb\u53c3\u8003 ",(0,i.jsx)(e.a,{href:"https://github.com/JiHungLin/llmbrick/tree/main/examples/intention_brick_define",children:(0,i.jsx)(e.code,{children:"examples/intention_brick_define/"})})," \u76ee\u9304\u4e0b\u7684\u5b8c\u6574\u7bc4\u4f8b\uff0c\u5305\u542b\u672c\u5730\u7aef\u8207 gRPC \u5169\u7a2e\u7528\u6cd5\uff0c\u4e26\u6db5\u84cb\u6240\u6709\u5e38\u898b\u65b9\u6cd5\u578b\u614b\u3002"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"9-\u5e38\u898b\u554f\u984c",children:"9. \u5e38\u898b\u554f\u984c"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Q: \u5982\u4f55\u64f4\u5145\u81ea\u8a02\u610f\u5716\u5206\u985e\u908f\u8f2f\uff1f"}),(0,i.jsx)(e.br,{}),"\n","A: \u53ef\u65bc ",(0,i.jsx)(e.code,{children:"MyIntentionBrick.__init__"})," \u6216 ",(0,i.jsx)(e.code,{children:"process"})," \u65b9\u6cd5\u4e2d\u81ea\u8a02\u610f\u5716\u95dc\u9375\u5b57\u3001\u898f\u5247\uff0c\u6216\u4e32\u63a5\u5916\u90e8 NLP/LLM \u6a21\u578b\u9032\u884c\u5206\u985e\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:"\u672c\u6559\u5b78\u6db5\u84cb\u4e86 IntentionBrick \u7684\u5b8c\u6574\u5b9a\u7fa9\u3001\u5be6\u4f5c\u8207\u4f7f\u7528\u6d41\u7a0b\uff0c\u9069\u5408\u521d\u5b78\u8005\u8207\u9032\u968e\u958b\u767c\u8005\u5feb\u901f\u4e0a\u624b LLMBrick \u6846\u67b6\u7684\u610f\u5716\u5206\u985e\u6a21\u7d44\u958b\u767c\u3002"})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(a,{...n})}):a(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>c});var t=r(6540);const i={},s=t.createContext(i);function o(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);